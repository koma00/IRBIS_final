<doc>
    <assembly>
        <name>pcsc-sharp</name>
    </assembly>
    <members>
        <member name="T:PCSC.CardInitializedEvent">
            <param name="sender">The <see cref="T:PCSC.SCardMonitor" /> sender object.</param>
            <param name="e">Reader status information.</param>
            <summary>The reader has been Initialized.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardInitializedMethod.
monitor.Initialized += new CardInitializedEvent(MyCardInitializedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="T:PCSC.CardInsertedEvent">
            <param name="sender">The <see cref="T:PCSC.SCardMonitor" /> sender object.</param>
            <param name="e">Reader status information.</param>
            <summary>A new card has been inserted.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardInsertedMethod.
monitor.CardInserted += new CardInsertedEvent(MyCardInsertedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="T:PCSC.CardRemovedEvent">
            <param name="sender">The <see cref="T:PCSC.SCardMonitor" /> sender object.</param>
            <param name="e">Reader status information.</param>
            <summary>A card has been removed.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardRemovedMethod.
monitor.CardRemoved += new CardRemovedEvent(MyCardRemovedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="T:PCSC.CardStatusEventArgs">
            <summary>Information about a smart card reader status.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.CardStatusEventArgs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.CardStatusEventArgs(System.String,PCSC.SCRState,System.Byte[])">
            <param name="ReaderName">To be added.</param>
            <param name="State">To be added.</param>
            <param name="Atr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.CardStatusEventArgs.Atr">
            <summary>The card's ATR.</summary>
            <remarks />
        </member>
        <member name="F:PCSC.CardStatusEventArgs.ReaderName">
            <summary>The reader name.</summary>
            <remarks>A human readable string of the reader name.</remarks>
        </member>
        <member name="F:PCSC.CardStatusEventArgs.State">
            <summary>The current reader status.</summary>
            <remarks>
                <para>
Is a bit mask containing one or more of the following values:
</para>
                <list type="table">
                    <listheader>
                        <term>State</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unaware" />
                        </term>
                        <description>The application is unaware of the current state, and would like to know. The use of this value results in an immediate return from state transition monitoring services. This is represented by all bits set to zero.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Ignore" />
                        </term>
                        <description>This reader should be ignored</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Changed" />
                        </term>
                        <description>There is a difference between the state believed by the application, and the state known by the resource manager. When this bit is set, the application may assume a significant state change has occurred on this reader.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unknown" />
                        </term>
                        <description>The given reader name is not recognized by the resource manager. If this bit is set, then <see cref="F:PCSC.SCRState.Changed" /> and <see cref="F:PCSC.SCRState.Ignore" /> will also be set</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unavailable" />
                        </term>
                        <description>The actual state of this reader is not available. If this bit is set, then all the following bits are clear.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Empty" />
                        </term>
                        <description>There is no card in the reader. If this bit is set, all the following bits will be clear</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Present" />
                        </term>
                        <description>There is a card in the reader</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Exclusive" />
                        </term>
                        <description>The card in the reader is allocated for exclusive use by another application. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.InUse" />
                        </term>
                        <description>The card in the reader is in use by one or more other applications, but may be connected to in shared mode. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Mute" />
                        </term>
                        <description>There is an unresponsive card in the reader.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="T:PCSC.CommunicationErrorException">
            <summary>A communication error occurred.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.CommunicationErrorException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.CommunicationErrorException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.CommunicationErrorException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InsufficientBufferException">
            <summary>A supplied buffer is insufficient.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InsufficientBufferException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InsufficientBufferException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InsufficientBufferException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InternalErrorException">
            <summary>An internal error occurred.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InternalErrorException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InternalErrorException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InternalErrorException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InvalidContextException">
            <summary>Invalid PC/SC context exception.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.InvalidContextException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidContextException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidContextException(PCSC.SCardError,System.String,PCSC.PCSCException)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerEx">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InvalidParameterException">
            <summary>One or more arguments contain invalid parameters.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidParameterException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidParameterException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidParameterException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InvalidProtocolException">
            <summary>An invalid protocol has been requested.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidProtocolException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidProtocolException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidProtocolException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InvalidScopeTypeException">
            <summary>Invalid PC/SC scope exception.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.InvalidScopeTypeException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidScopeTypeException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidScopeTypeException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InvalidShareModeException">
            <summary>The share mode is invalid.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidShareModeException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidShareModeException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidShareModeException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.InvalidValueException">
            <summary>One or more arguments contain invalid values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidValueException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidValueException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.InvalidValueException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.ISCardReader">
            <summary>Common functions that are needed to operate on Smart Card readers.</summary>
            <remarks>See <see cref="T:PCSC.SCardReader" />.</remarks>
        </member>
        <member name="P:PCSC.ISCardReader.ActiveProtocol">
            <summary>The currently used protocol to communicate with the card.</summary>
            <value>
                <see cref="F:PCSC.SCardProtocol.Unset" /> if not connected.</value>
            <remarks />
        </member>
        <member name="M:PCSC.ISCardReader.BeginTransaction">
            <summary>Establishes a temporary exclusive access mode for doing a serie of commands in a transaction. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.SharingViolation" />
                        </term>
                        <description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
You might want to use this when you are selecting a few files and then writing a large file so you can make sure that another application will not change the current file. If another application has a lock on this reader or this application is in <see cref="F:PCSC.SCardShareMode.Exclusive" /> there will be no action taken.
</para>
                <para>
This method calls the API function SCardBeginTransaction().
</para>
            </remarks>
        </member>
        <member name="P:PCSC.ISCardReader.CardHandle">
            <summary>A pointer (Card Handle) that can be used for C API calls.</summary>
            <value>0 if not connected.</value>
            <remarks>
                <para>
This is the card handle that is returned when calling the C API function SCardConnect().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)">
            <param name="name">Reader name to connect to. </param>
            <param name="mode">Mode of connection type: exclusive or shared.</param>
            <param name="prefProto">Desired protocol use.</param>
            <summary>Establishes a connection to the Smart Card reader.</summary>
            <returns>An error code / return value:


<list type="table"><listheader><term>Error code</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardError.Success" /></term><description>Successful (SCARD_S_SUCCESS)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidHandle" /></term><description>Invalid context handle (SCARD_E_INVALID_HANDLE)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidParameter" /></term><description><paramref name="prefProto" /> is invalid or <see langword="null" />  (SCARD_E_INVALID_PARAMETER)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidValue" /></term><description>Invalid sharing mode, requested protocol, or reader name (SCARD_E_INVALID_VALUE)</description></item><item><term><see cref="F:PCSC.SCardError.NoService" /></term><description>The server is not runing (SCARD_E_NO_SERVICE)</description></item><item><term><see cref="F:PCSC.SCardError.NoSmartCard" /></term><description>No smart card present (SCARD_E_NO_SMARTCARD)</description></item><item><term><see cref="F:PCSC.SCardError.NotReady" /></term><description>Could not allocate the desired port (SCARD_E_NOT_READY)</description></item><item><term><see cref="F:PCSC.SCardError.ProtocolMismatch" /></term><description>Requested protocol is unknown (SCARD_E_PROTO_MISMATCH)</description></item><item><term><see cref="F:PCSC.SCardError.ReaderUnavailable" /></term><description>Could not power up the reader or card (SCARD_E_READER_UNAVAILABLE)</description></item><item><term><see cref="F:PCSC.SCardError.SharingViolation" /></term><description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description></item><item><term><see cref="F:PCSC.SCardError.UnknownReader" /></term><description>The reader name is <see langword="null" /> (SCARD_E_UNKNOWN_READER)</description></item><item><term><see cref="F:PCSC.SCardError.UnsupportedFeature" /></term><description>Protocol not supported (SCARD_E_UNSUPPORTED_FEATURE)</description></item><item><term><see cref="F:PCSC.SCardError.CommunicationError" /></term><description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.InternalError" /></term><description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.UnpoweredCard" /></term><description>Card is not powered (SCARD_W_UNPOWERED_CARD)</description></item><item><term><see cref="F:PCSC.SCardError.UnresponsiveCard" /></term><description>Card is mute (SCARD_W_UNRESPONSIVE_CARD)</description></item></list></returns>
            <remarks>
                <para>
                    <paramref name="prefProto" />  is a bit mask of acceptable protocols for the connection. You can use (<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />) if you do not have a preferred protocol.
The protocol used with this connection will be stored in <see cref="P:PCSC.ISCardReader.ActiveProtocol" />.
</para>
                <para>
This method calls the API function SCardConnect().
</para>
                <example>
                    <code lang="C#">
// Establish PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Create a Smart Card reader object and connect to it.
ISCardReader reader = new SCardReader(ctx);
SCardError serr = reader.Connect("OMNIKEY CardMan 5x21 00 00",
	SCardShareMode.Shared,
	SCardProtocol.Any);
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Control(System.IntPtr,System.Byte[],System.Byte[]@)">
            <param name="controlCode">Control code for the operation. 
</param>
            <param name="sendBuffer">Command to send to the reader.</param>
            <param name="recvBuffer">Response from the reader.</param>
            <summary>Sends a command directly to the IFD Handler (reader driver) to be processed by the reader.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> is <see langword="null" /> and the IFDHandler is version 2.0 (without <paramref name="controlCode" />) (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid value was presented (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed(SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.UnsupportedFeature" />
                        </term>
                        <description>Driver does not support (SCARD_E_UNSUPPORTED_FEATURE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader(SCARD_W_REMOVED_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method is useful for creating client side reader drivers for functions like PIN pads, biometrics, or other extensions to the normal smart card reader that are not normally handled by PC/SC.
</para>
                <para>
This method calls the API function SCardControl().
</para>
                <block subset="none" type="note">
                    <para>
    The API of this function changed. In pcsc-lite 1.2.0 and before the API was not Windows(R) PC/SC compatible. This has been corrected.
  </para>
                </block>
            </remarks>
        </member>
        <member name="P:PCSC.ISCardReader.CurrentContext">
            <summary>The Smart Card context that will be used for this connection.</summary>
            <value>
                <see langword="null" /> if the reader is not connected.</value>
            <remarks />
        </member>
        <member name="P:PCSC.ISCardReader.CurrentShareMode">
            <summary>The current mode of connection type: exclusive or shared.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:PCSC.ISCardReader.Disconnect(PCSC.SCardReaderDisposition)">
            <param name="discntExec">Reader function to execute.</param>
            <summary>Terminates a connection made through <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid <paramref name="discntExec" /> (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoSmartcard" />
                        </term>
                        <description>No smart card present (SCARD_E_NO_SMARTCARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method calls the API function SCardDisconnect().
</para>
                <example>
                    <code lang="C#">
// Establish PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Create a Smart Card reader object and connect to it.
ISCardReader reader = new SCardReader(ctx);
SCardError serr = reader.Connect("OMNIKEY",
	SCardShareMode.Shared,
	SCardProtocol.Any);

// Disconnect the reader and reset the SmartCard.
reader.Disconnect(SCardReaderDisposition.Reset);
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.EndTransaction(PCSC.SCardReaderDisposition)">
            <param name="disposition">Action to be taken on the reader.</param>
            <summary>Ends a previously begun transaction. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid value for <paramref name="disposition" /> (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.SharingViolation" />
                        </term>
                        <description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The calling application must be the owner of the previously begun transaction or an error will occur.
</para>
                <para>
This method calls the API function SCardEndTransaction().
</para>
                <block subset="none" type="note">
                    <para>
The disposition action is not currently used in PC/SC Lite on UNIX/Linux machines.
  </para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[]@)">
            <param name="AttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method calls the API function SCardGetAttrib().
</para>
                <example>
                    <code lang="C#">
// Helper function that translates a byte array into an hex-encoded ATR string.
static string StringAtr(byte[] atr)
{
	if (atr == null)
	return null;

	StringBuilder sb = new StringBuilder();
	foreach (byte b in atr)
		sb.AppendFormat("{0:X2}", b);

	return sb.ToString();
}
  </code>
                </example>
                <example>
                    <code lang="C#">
// Create a new PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

string[] readernames = ctx.GetReaders();
if (readernames == null || readernames.Length == 0)
	throw new Exception("You need at least one reader in order to run this example.");

// Receive the ATR of each reader by using the GetAttrib function
foreach (string name in readernames)
{
	SCardReader reader = new SCardReader(ctx);

	Console.Write("Trying to connect to reader.. " + name);
                
	// Connect to the reader, error if no card present.
	SCardError rc = reader.Connect(
		name,
		SCardShareMode.Exclusive,
		SCardProtocol.Any);

	if (rc == SCardError.Success)
	{
		// Reader is now connected.
		Console.WriteLine(" done.");

		// receive ATR string attribute
		byte[] atr;
		rc = reader.GetAttrib(SCardAttr.ATRString, out atr);

		if (rc != SCardError.Success)
		{
			// ATR not supported?
			Console.WriteLine("Error by trying to receive the ATR. "
				+ SCardHelper.StringifyError(rc) + "\n");
		} else {
			Console.WriteLine("ATR: " + StringAtr(atr) + "\n");
		}

		// Disconnect
		reader.Disconnect(SCardReaderDisposition.Leave);
	} else  {
		// Probably no SmartCard present.
		Console.WriteLine(" failed. " + SCardHelper.StringifyError(rc) + "\n");
	}
}
ctx.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.GetAttrib(System.IntPtr,System.Byte[]@)">
            <param name="AttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method calls the API function SCardGetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[],System.Int32@)">
            <param name="AttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <param name="AttrLen">Size of the result contained in pbAttr (in bytes).</param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The method will return <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if <paramref name="pbAttr" /> is <see langword="null" /> or if the buffer size is not sufficient. <paramref name="AttrLen" /> contains the required amount of bytes (size).
</para>
                <para>
If the method returned with <see cref="F:PCSC.SCardError.Success" /> then
<paramref name="AttrLen" /> contains the exact size of the result in <paramref name="pbAttr" />.
</para>
                <para>
For an example please see <see cref="M:PCSC.ISCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[]@)" />.
</para>
                <para>
This method calls the API function SCardGetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.GetAttrib(System.IntPtr,System.Byte[],System.Int32@)">
            <param name="dwAttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <param name="AttrLen">Size of the result contained in pbAttr (in bytes).</param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The method will return <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if <paramref name="pbAttr" /> is <see langword="null" /> or if the buffer size is not sufficient. <paramref name="AttrLen" /> contains the required amount of bytes (size).
</para>
                <para>
If the method returned with <see cref="F:PCSC.SCardError.Success" /> then
<paramref name="AttrLen" /> contains the exact size of the result in <paramref name="pbAttr" />.
</para>
                <para>
This method calls the API function SCardGetAttrib().
</para>
            </remarks>
        </member>
        <member name="P:PCSC.ISCardReader.ReaderName">
            <summary>The connected reader's friendly name.</summary>
            <value>A human readable string of the reader name or <see langword="null" /> if the reader object is currently not connected.</value>
            <remarks />
        </member>
        <member name="M:PCSC.ISCardReader.Reconnect(PCSC.SCardShareMode,PCSC.SCardProtocol,PCSC.SCardReaderDisposition)">
            <param name="mode">Mode of connection type: exclusive/shared. 
<list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardShareMode.Shared" /></term><description>This application will allow others to share the reader. (SCARD_SHARE_SHARED)</description></item><item><term><see cref="F:PCSC.SCardShareMode.Exclusive" /></term><description>This application will NOT allow others to share the reader. (SCARD_SHARE_EXCLUSIVE)</description></item></list></param>
            <param name="prefProto">Desired protocol use.</param>
            <param name="initExec">Desired action taken on the card/reader.</param>
            <summary>Reestablishes a connection to a reader that was previously connected to using <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />.</summary>
            <returns>An error code / return value:


<list type="table"><listheader><term>Error code</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardError.Success" /></term><description>Successful (SCARD_S_SUCCESS)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidHandle" /></term><description>Invalid context handle (SCARD_E_INVALID_HANDLE)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidParameter" /></term><description><paramref name="prefProto" /> is invalid or <see langword="null" />  (SCARD_E_INVALID_PARAMETER)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidValue" /></term><description>Invalid sharing mode, requested protocol, or reader name (SCARD_E_INVALID_VALUE)</description></item><item><term><see cref="F:PCSC.SCardError.NoService" /></term><description>The server is not runing (SCARD_E_NO_SERVICE)</description></item><item><term><see cref="F:PCSC.SCardError.NoSmartCard" /></term><description>No smart card present (SCARD_E_NO_SMARTCARD)</description></item><item><term><see cref="F:PCSC.SCardError.NotReady" /></term><description>Could not allocate the desired port (SCARD_E_NOT_READY)</description></item><item><term><see cref="F:PCSC.SCardError.ProtocolMismatch" /></term><description>Requested protocol is unknown (SCARD_E_PROTO_MISMATCH)</description></item><item><term><see cref="F:PCSC.SCardError.ReaderUnavailable" /></term><description>Could not power up the reader or card (SCARD_E_READER_UNAVAILABLE)</description></item><item><term><see cref="F:PCSC.SCardError.SharingViolation" /></term><description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description></item><item><term><see cref="F:PCSC.SCardError.UnsupportedFeature" /></term><description>Protocol not supported (SCARD_E_UNSUPPORTED_FEATURE)</description></item><item><term><see cref="F:PCSC.SCardError.CommunicationError" /></term><description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.InternalError" /></term><description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.RemovedCard" /></term><description>The smart card has been removed (SCARD_W_REMOVED_CARD)</description></item><item><term><see cref="F:PCSC.SCardError.UnresponsiveCard" /></term><description>Card is mute (SCARD_W_UNRESPONSIVE_CARD)</description></item></list></returns>
            <remarks>
                <para>
                    <paramref name="prefProto" />  is a bit mask of acceptable protocols for the connection. You can use (<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />) if you do not have a preferred protocol.
The protocol used with this connection will be stored in <see cref="P:PCSC.ISCardReader.ActiveProtocol" />.
</para>
                <para>
This method calls the API function SCardReconnect().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.SetAttrib(PCSC.SCardAttr,System.Byte[])">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.SetAttrib(System.IntPtr,System.Byte[])">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.SetAttrib(PCSC.SCardAttr,System.Byte[],System.Int32)">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <param name="AttrBufSize">Length of the <paramref name="pbAttr" /> buffer in bytes.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.SetAttrib(System.IntPtr,System.Byte[],System.Int32)">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <param name="AttrBufSize">Length of the <paramref name="pbAttr" /> buffer in bytes.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Status(System.String[]@,PCSC.SCardState@,PCSC.SCardProtocol@,System.Byte[]@)">
            <param name="ReaderName">The connected readers's friendly name.</param>
            <param name="State">The current state.</param>
            <param name="Protocol">The card's currently used protocol.</param>
            <param name="Atr">The card's ATR.</param>
            <summary>Returns the current status of the reader and the connected card.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>The reader object did not allocate enough memory for <paramref name="ReaderName" /> or for <paramref name="Atr" /> (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>The reader object got invalid. Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>The reader object passed a size of null for <paramref name="ReaderName" /> or <paramref name="Atr" />  (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description> The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InternalError" />
                        </term>
                        <description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The smart card has been removed (SCARD_W_REMOVED_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The smart card has been reset (SCARD_W_RESET_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The connected readers's friendly name will be stored in <paramref name="ReaderName" />. The card's ATR will be stored in <paramref name="Atr" />. The current state, and protocol will be stored in <paramref name="State" /> and <paramref name="Protocol" /> respectively.
</para>
                <para>
This method calls the API function SCardStatus().
</para>
                <example>
                    <code lang="C#">
// Create a new PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// retrieve all reader names
string[] readernames = ctx.GetReaders();

if (readernames != null)
{
	// get the card status of each reader that is currently connected
	foreach (string readername in readernames)
	{
		SCardReader reader = new SCardReader(ctx);
		Console.Write("Trying to connect to reader " + readername + "..");

		SCardError serr = reader.Connect(readername,
			SCardShareMode.Shared,
			SCardProtocol.Any);

		if (serr == SCardError.Success)
		{
			// SmartCard inserted, reader is now connected.
			Console.WriteLine(" done.");

			string[] tmpreadernames;
			SCardProtocol proto;
			SCardState state;
			byte[] atr;

			serr = reader.Status(
				out tmpreadernames, // contains the reader name(s)
				out state,          // contains the current state (flags)
				out proto,          // contains the currently used communication protocol
				out atr);           // contains the card ATR

			if (serr == SCardError.Success)
			{
				Console.WriteLine("Connected with protocol " +
					proto + " in state " + state);
				if (atr != null &amp;&amp; atr.Length != 0)
				{
					Console.Write("Card ATR: ");
					foreach (byte b in atr)
						Console.Write("{0:X2}", b);
					Console.WriteLine();
				}
				Console.WriteLine();
			} else {
				Console.WriteLine("Unable to retrieve card status.\nError message: "
					+ SCardHelper.StringifyError(serr)
					+ ".\n");
			}

			reader.Disconnect(SCardReaderDisposition.Reset);
		} else {
			/* SmardCard not inserted or reader is reserved exclusively by
				another application. */
			Console.WriteLine(" failed.\nError message: "
				+ SCardHelper.StringifyError(serr) + ".\n");
		}
	}
}
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Transmit(System.Byte[],System.Byte[]@)">
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="recvBuffer">Response from the card.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />.  The buffer <paramref name="recvBuffer" /> must be initialized and will be resized, if the buffer was too big.
</para>
                <para>
This method calls the API function SCardTransmit().
</para>
                <block subset="none" type="note">
                    <para>
This method will only work if the reader has been connected with one of the following protocols:

<list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Transmit(System.Byte[],System.Byte[],System.Int32@)">
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="recvBuffer">Response from the card.</param>
            <param name="recvBufferLength">The buffer size of <paramref name="recvBuffer" /> in bytes.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />.  The buffer <paramref name="recvBuffer" /> must be initialized. The size of the returned data will be stored in <paramref name="recvBufferLength" />. This method will return with error code <see cref="E:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="recvBuffer" /> is too small for the result. If the parameter <paramref name="recvBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.
</para>
                <para>
This method calls the API function SCardTransmit().
</para>
                <block subset="none" type="note">
                    <para>
This method will only work if the reader has been connected with one of the following protocols:

<list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Transmit(System.IntPtr,System.Byte[],System.Byte[]@)">
            <param name="pioSendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:

<list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="recvBuffer">Response from the card.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. 
</para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Transmit(PCSC.SCardPCI,System.Byte[],PCSC.SCardPCI,System.Byte[]@)">
            <param name="ioSendPci">Structure of Protocol Control Information.</param>
            <param name="sendBuffer">APDU to send to the card.</param>
            <param name="ioRecvPci">Structure of protocol information.</param>
            <param name="RecvBuffer">Response from the card.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. <paramref name="ioSendPci" /> and <paramref name="ioRecvPci" /> are structures containing the following (implemented in <see cref="T:PCSC.SCardPCI" />): 

<example><code lang="C">
typedef struct {
	DWORD dwProtocol;    // SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
	DWORD cbPciLength;   // Length of this structure - not used
} SCARD_IO_REQUEST;
  </code></example></para>
                <para>
It is recommended to use pre-defined / built-in PCI structures by calling one of the following methods:
<list type="bullet"><item><term><see cref="M:PCSC.ISCardReader.Transmit(System.IntPtr,System.Byte[],PCSC.SCardPCI,System.Byte[]@)" /></term></item><item><term><see cref="M:PCSC.ISCardReader.Transmit(System.IntPtr,System.Byte[],System.Byte[]@)" /></term></item></list></para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Transmit(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="sendBufferLength">The buffer size of <paramref name="sendBuffer" /> in bytes.</param>
            <param name="recvBuffer">Response from the card.</param>
            <param name="recvBufferLength">The buffer size of <paramref name="recvBuffer" /> in bytes.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />.  The buffer <paramref name="recvBuffer" /> must be initialized. The size of the returned data will be stored in <paramref name="recvBufferLength" />. This method will return with error code <see cref="E:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="recvBuffer" /> is too small for the result. If one of the parameters <paramref name="sendBufferLength" /> or <paramref name="recvBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.
</para>
                <para>
This method calls the API function SCardTransmit().
</para>
                <block subset="none" type="note">
                    <para>
This method will only work if the reader has been connected with one of the following protocols:

<list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Transmit(System.IntPtr,System.Byte[],PCSC.SCardPCI,System.Byte[]@)">
            <param name="pioSendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:

<list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="ioRecvPci">Structure of protocol information. </param>
            <param name="recvBuffer">Response from the card. </param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. <paramref name="ioRecvPci" /> is a structure containing the following (implemented in <see cref="T:PCSC.SCardPCI" />): 

<example><code lang="C">
typedef struct {
	DWORD dwProtocol;    // SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
	DWORD cbPciLength;   // Length of this structure - not used
} SCARD_IO_REQUEST;
  </code></example></para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
                <example>
                    <code lang="C#">
// Create a new PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Connect to the reader
SCardReader RFIDReader = new SCardReader(ctx);
SCardError rc = RFIDReader.Connect(
	"OMNIKEY CardMan 5x21 00 01", 
	SCardShareMode.Shared, 
	SCardProtocol.T1);

if (rc != SCardError.Success) {
	Console.WriteLine("Unable to connect to RFID card / chip. Error: " +
		SCardHelper.StringifyError(rc));
	return;
}

// prepare APDU
byte[] ucByteSend = new byte[] 
	{
		0xFF,   // the instruction class
		0xCA,   // the instruction code 
		0x00,   // parameter to the instruction
		0x00,   // parameter to the instruction
		0x00    // size of I/O transfer
	};
byte[] ucByteReceive = new byte[10];

Console.Out.WriteLine("Retrieving the UID .... ");

rc = RFIDReader.BeginTransaction();
if (rc != SCardError.Success)
	throw new Exception("Could not begin transaction.");

SCardPCI ioreq = new SCardPCI();   // IO returned protocol control information.

rc = RFIDReader.Transmit(
	SCardPCI.T1,/* Protocol control information, T0, T1 and Raw
	             * are global defined protocol header structures. */
	ucByteSend, /* the actual data to be written to the card */
	ioreq,      /* The returned protocol control information */
	ref ucByteReceive);

if (rc == SCardError.Success)
{
	Console.Write("Uid: ");
	for (int i = 0; i &lt; (ucByteReceive.Length); i++)
		Console.Write("{0:X2} ", ucByteReceive[i]);
	Console.WriteLine("");
} 
else 
{
	Console.WriteLine("Error: " + SCardHelper.StringifyError(rc));
}
            
RFIDReader.EndTransaction(SCardReaderDisposition.Leave);
RFIDReader.Disconnect(SCardReaderDisposition.Reset);
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.ISCardReader.Transmit(System.IntPtr,System.Byte[],System.Int32,PCSC.SCardPCI,System.Byte[],System.Int32@)">
            <param name="pioSendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:

<list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="sendBufLength">The buffer size of <paramref name="sendBuffer" /> in bytes.</param>
            <param name="ioRecvPci">Structure of protocol information. </param>
            <param name="recvBuffer">Response from the card.</param>
            <param name="recvBufLength">The buffer size of <paramref name="recvBuffer" /> in bytes.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. The size of the returned data will be stored in <paramref name="recvBuferfLength" />. This method will return with error code <see cref="E:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="recvBuffer" /> is too small for the result. If one of the parameters <paramref name="sendBufferLength" /> or <paramref name="recvBuferfLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.
</para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
            </remarks>
        </member>
        <member name="T:PCSC.MonitorExceptionEvent">
            <param name="sender">The <see cref="T:PCSC.SCardMonitor" /> sender object.</param>
            <param name="ex">The PC/SC error code returned from the native library.</param>
            <summary>An PC/SC error occurred during monitoring.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyMonitorExceptionMethod.
monitor.MonitorException += new MonitorExceptionEvent(MyMonitorExceptionMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="T:PCSC.NoServiceException">
            <summary>The PC/SC service is not running.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NoServiceException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NoServiceException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NoServiceException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.NoSmartcardException">
            <summary>No smart card is currently inserted.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NoSmartcardException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NoSmartcardException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NoSmartcardException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.NotReadyException">
            <summary>The reader or the smart card is not ready.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NotReadyException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NotReadyException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.NotReadyException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.PCSCException">
            <summary>A general PC/SC exception.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.PCSCException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.PCSCException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.PCSCException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerEx">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.PCSCException.SCardError">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.ReaderUnavailableException">
            <summary>The requested reader is unavailable.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.ReaderUnavailableException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.ReaderUnavailableException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.ReaderUnavailableException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.RemovedCardException">
            <summary>A smart card has been removed.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.RemovedCardException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.RemovedCardException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.RemovedCardException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.SCardAttr">
            <summary>Smart card reader attribute enumeration.</summary>
            <remarks>Can be used as parameter for the following methods:

<list type="bullet"><item><term><see cref="M:PCSC.SCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[]@)" /></term></item><item><term><see cref="M:PCSC.SCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[],System.Int32@)" /></term></item><item><term><see cref="M:PCSC.SCardReader.SetAttrib(PCSC.SCardAttr,System.Byte[])" /></term></item><item><term><see cref="M:PCSC.SCardReader.SetAttrib(PCSC.SCardAttr,System.Byte[],System.Int32)" /></term></item></list></remarks>
        </member>
        <member name="F:PCSC.SCardAttr.AsyncProtocolTypes">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.ATRString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.ChannelId">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.Characteristics">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentBwt">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentClk">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentCwt">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentD">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentEbcEncoding">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentF">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentIfsc">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentIfsd">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentIOState">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentN">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentProtocolType">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.CurrentW">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DefaultClk">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DefaultDataRate">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceFriendlyName">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceFriendlyNameA">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceFriendlyNameW">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceInUse">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceSystemName">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceSystemNameA">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceSystemNameW">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.DeviceUnit">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.EscAuthRequest">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.EscCancel">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.EscReset">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.ExtendedBwt">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.ICCInterfaceStatus">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.ICCPresence">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.ICCTypePerATR">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.MaxClk">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.MaxDataRate">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.MaxIfsd">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.MaxInput">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.PowerMgmtSupport">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.SupressT1IFSRequest">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.SyncProtocolTypes">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.UserAuthInputDevice">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.UserToCardAuthDevice">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.VendorIFDSerialNo">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.VendorIFDType">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.VendorIFDVersion">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardAttr.VendorName">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.SCardClass">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.SCardClass.Communications">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.ICCState">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.IFDProtocol">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.Mechanical">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.PowerMgmt">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.Protocol">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.Security">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.System">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.VendorDefined">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.SCardClass.VendorInfo">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.SCardContext">
            <summary>Manages an Application Context to the PC/SC Resource Manager.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.SCardContext">
            <summary>Creates a new SCardContext object.</summary>
            <remarks>Each thread of an application shall use its own SCardContext.</remarks>
        </member>
        <member name="M:PCSC.SCardContext.Cancel">
            <summary>Cancels all pending blocking requests on the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> method. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid context (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>Server is not running (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method calls the API function SCardCancel().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.CheckValidity">
            <summary>Checks the validity of the current context. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>The context is valid. (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>The context is invalid. (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
Call this function to determine whether a smart card context handle is still valid. After a smart card context handle has been set by <see cref="M:PCSC.SCardContext.Establish(PCSC.SCardScope)" />, it may become not valid if the resource manager service has been shut down.
</para>
                <para>
This method calls the API function SCardIsValidContext().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.Dispose">
            <summary>Disposes a PC/SC context.</summary>
            <remarks>If a context to the PC/SC Resource Manager is established, Dispose() will call the <see cref="M:PCSC.SCardContext.Release()" /> method silently.</remarks>
        </member>
        <member name="M:PCSC.SCardContext.Establish(PCSC.SCardScope)">
            <param name="scope">Scope of the establishment. This can either be a local or remote connection.</param>
            <summary>Creates an Application Context to the PC/SC Resource Manager.</summary>
            <remarks>
                <para>
Creates an Application Context for a client. This must be the first WinSCard function called in a PC/SC application. Each thread of an application shall use its own <see cref="T:PCSC.SCardContext" />.</para>
                <para>This method calls the API function SCardEstablishContext().
</para>
                <example>
                    <code lang="C#">
SCardContext context = new SCardContext();
context.Establish(SCardScope.System);
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.Finalize">
            <summary />
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.SCardContext.GetReaderGroups">
            <summary>Returns a list of currently available reader groups on the system. </summary>
            <returns>An array of <see cref="T:System.String" />s containing all Smart Card reader groups found by the PC/SC Resource Manager.</returns>
            <remarks>
                <para>
This method calls the API function SCardListReaderGroups().
</para>
                <example>
                    <code lang="C#">
SCardContext context = new SCardContext();
context.Establish(SCardScope.System);

// list all configured reader groups
Console.Out.WriteLine("\nCurrently configured readers groups: ");
string[] groups = context.GetReaderGroups();
foreach (string group in groups)
	Console.WriteLine("\t" + group);

context.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.GetReaders">
            <summary>Returns a list of currently available readers on the system.</summary>
            <returns>An array of <see cref="T:System.String" />s containing all Smart Card readers found by the PC/SC Resource Manager.</returns>
            <remarks>
                <para>
This method calls the API function SCardListReaders().
</para>
                <example>
                    <code lang="C#">
SCardContext context = new SCardContext();
context.Establish(SCardScope.System);

// list all (smart card) readers
Console.Out.WriteLine("Currently connected readers: ");
string[] readers = context.GetReaders();
foreach (string reader in readers)
	Console.WriteLine("\t" + reader);

context.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.GetReaders(System.String[])">
            <param name="Groups">List of groups to list readers.</param>
            <summary>Returns a list of currently available readers on the system.</summary>
            <returns>An array of <see cref="T:System.String" />s containing all Smart Card readers found by the PC/SC Resource Manager.</returns>
            <remarks>
                <para>
Groups is not used on Linux/UNIX machines using the PC/SC Lite daemon.
</para>
                <para>
This method calls the API function SCardListReaders().
</para>
                <example>
                    <code lang="C#">
SCardContext context = new SCardContext();
context.Establish(SCardScope.System);

// list all configured reader groups
Console.Out.WriteLine("\nCurrently configured readers groups: ");
string[] groups = context.GetReaderGroups();
foreach (string group in groups)
	Console.WriteLine("\t" + group);

// list readers for each group
foreach (string group in groups)
{
	Console.WriteLine("\nGroup " + group + " contains ");
	foreach (string reader in context.GetReaders(new string[] {group}))
		Console.WriteLine("\t" + reader);
}

context.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.GetReaderStatus(System.String)">
            <param name="readername">The requested reader.</param>
            <summary>Returns the current reader status.</summary>
            <returns>A <see cref="T:PCSC.SCardReaderState" /> that contains the current reader status.</returns>
            <remarks>
                <para>
This method uses the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> method with a <paramref name="timeout" /> of zero.
</para>
                <example>
                    <code lang="C#">
// Helper function to display the ATR
static string StringAtr(byte[] atr)
{
	if (atr == null)
		return null;

	StringBuilder sb = new StringBuilder();
	foreach (byte b in atr)
		sb.AppendFormat("{0:X2}", b);

	return sb.ToString();
}
  </code>
                </example>
                <example>
                    <code lang="C#">
// Retrieve the names of all installed readers.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);
string[] readernames = ctx.GetReaders();

// Get the current status of the first reader in "readernames".
SCardReaderState state = ctx.GetReaderStatus(readernames[0]);

Console.WriteLine("Reader: " + state.ReaderName);
Console.WriteLine("CurrentState: " + state.CurrentState 
	+ " EventState: " + state.EventState + "\n"
	+ "CurrentStateValue: " + state.CurrentStateValue 
	+ " EventStateValue: " + state.EventStateValue);
Console.WriteLine("UserData: " + state.UserData.ToString()
	+ " CardChangeEventCnt: " + state.CardChangeEventCnt);
Console.WriteLine("ATR: " + StringAtr(state.ATR));
            
ctx.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.GetReaderStatus(System.String[])">
            <param name="readernames">Requested reader names.</param>
            <summary>Returns the current reader status of all requested readers.</summary>
            <returns>An array of <see cref="T:PCSC.SCardReaderState" />s that contains the current reader status of each requested reader.</returns>
            <remarks>
                <para>
This method uses the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> method with a <paramref name="timeout" /> of zero.
</para>
                <example>
                    <code lang="C#">
// Helper function to display the ATR.
static string StringAtr(byte[] atr)
{
	if (atr == null)
		return null;

	StringBuilder sb = new StringBuilder();
	foreach (byte b in atr)
		sb.AppendFormat("{0:X2}", b);

	return sb.ToString();
}
  </code>
                </example>
                <example>
                    <code lang="C#">
// Retrieve the names of all installed readers.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);
string[] readernames = ctx.GetReaders();

// Get the current status of each reader in "readernames".
SCardReaderState[] states = ctx.GetReaderStatus(readernames);

foreach (SCardReaderState state in states)
{
	Console.WriteLine("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");
	Console.WriteLine("Reader: " + state.ReaderName);
	Console.WriteLine("CurrentState: " + state.CurrentState 
		+ " EventState: " + state.EventState + "\n"
		+ "CurrentStateValue: " + state.CurrentStateValue 
		+ " EventStateValue: " + state.EventStateValue);
	Console.WriteLine("UserData: " + state.UserData.ToString()
		+ " CardChangeEventCnt: " + state.CardChangeEventCnt);
	Console.WriteLine("ATR: " + StringAtr(state.ATR));
}
            
ctx.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])">
            <param name="timeout">Maximum waiting time (in milliseconds) for status change, zero or <see cref="F:PCSC.SCardContext.Infinite" /> for infinite.</param>
            <param name="readerstates">Structures of readers with current states. </param>
            <summary>Blocks execution until the current availability of the cards in a specific set of readers changes.</summary>
            <returns>
                <para>
A <see cref="T:PCSC.SCardError" /> indicating an error or the success.The caller receives status changes through the <see cref="T:PCSC.SCardReaderState" /> array.</para>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>Server is not running (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="readerstates" /> is invalid or <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid States, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid context (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader is unavailable (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Timeout" />
                        </term>
                        <description>The user-specified timeout value has expired (SCARD_E_TIMEOUT)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method receives a structure or list of structures containing reader names. It then blocks for a change in state to occur for a maximum blocking time of <paramref name="timeout" /> or forever if <see cref="F:PCSC.SCardContext.Infinite" /> is used.
</para>
                <para>
The new event state will be contained in <see cref="P:PCSC.SCardReaderState.EventState" />. A status change might be a card insertion or removal event, a change in ATR, etc.
</para>
                <para>
To wait for a reader event (reader added or removed) you may use the special reader name "\\?PnP?\Notification". If a reader event occurs the state of this reader will change and the bit <see cref="F:PCSC.SCRState.Changed" /> will be set.
</para>
                <para>
This method calls the API function SCardGetStatusChange().

</para>
            </remarks>
        </member>
        <member name="P:PCSC.SCardContext.Handle">
            <summary>A pointer (Application Context) that can be used for C API calls.</summary>
            <value>The returned Application Context handle. Is 0 if not context has been established.</value>
            <remarks>
                <para>
This is the Application Context handle that is returned when calling the C API function SCardEstablishContext().
</para>
            </remarks>
        </member>
        <member name="F:PCSC.SCardContext.Infinite">
            <summary>Infinite timeout.</summary>
            <remarks />
        </member>
        <member name="P:PCSC.SCardContext.Infinite">
            <summary>Infinite timeout (const. value).</summary>
            <value />
            <remarks />
        </member>
        <member name="M:PCSC.SCardContext.IsValid">
            <summary>Checks the validity of the current context. </summary>
            <returns>
                <see langword="true" /> if the context is valid.</returns>
            <remarks>
                <para>
Call this function to determine whether a smart card context handle is still valid. After a smart card context handle has been set by <see cref="M:PCSC.SCardContext.Establish(PCSC.SCardScope)" />, it may become not valid if the resource manager service has been shut down.
</para>
                <example>
                    <code lang="C#">
SCardContext context = new SCardContext();
context.Establish(SCardScope.System);

Console.Out.WriteLine("Context is valid? -&gt; " + context.IsValid());

context.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="P:PCSC.SCardContext.MaxATRSize">
            <summary>Maximum ATR size.</summary>
            <value>
                <list type="table">
                    <listheader>
                        <term>Platform</term>
                        <description>
                            <paramref name="MaxATRSize" />
                        </description>
                    </listheader>
                    <item>
                        <term>Windows (Winscard.dll)</term>
                        <description>36</description>
                    </item>
                    <item>
                        <term>UNIX/Linux (PC/SClite)</term>
                        <description>33</description>
                    </item>
                </list>
            </value>
            <remarks>Attention: Size depends on platform.</remarks>
        </member>
        <member name="M:PCSC.SCardContext.ReEstablish">
            <summary>Re-Establishes an Application Context to the PC/SC Resource Manager with the last used <see cref="T:PCSC.SCardScope" />. </summary>
            <remarks>This method must not be called before <see cref="F:PCSC.SCardContext.Establish(PCSC.SCardScope)" /></remarks>
        </member>
        <member name="M:PCSC.SCardContext.Release">
            <summary>Destroys a communication context to the PC/SC Resource Manager.</summary>
            <remarks>
                <para>
This must be the last method called in a PC/SC application.
</para>
                <para>
This method calls the API function SCardReleaseContext().
</para>
                <example>
                    <code lang="C#">
SCardContext context = new SCardContext();

// establish context
context.Establish(SCardScope.System);
// release context
context.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="T:PCSC.SCardError">
            <summary>Error and return codes.</summary>
            <remarks />
        </member>
        <member name="F:PCSC.SCardError.BadSeek">
            <summary>There was an error trying to set the smart card file object pointer. (SCARD_E_BAD_SEEK)</summary>
        </member>
        <member name="F:PCSC.SCardError.Cancelled">
            <summary>The action was cancelled by an <see cref="M:PCSC.SCardContext.Cancel()" /> request. (SCARD_E_CANCELLED)</summary>
        </member>
        <member name="F:PCSC.SCardError.CancelledByUser">
            <summary>The user pressed "Cancel" on a Smart Card Selection Dialog. (SCARD_W_CANCELLED_BY_USER)</summary>
        </member>
        <member name="F:PCSC.SCardError.CantDispose">
            <summary>The system could not dispose of the media in the requested manner. (SCARD_E_CANT_DISPOSE)</summary>
        </member>
        <member name="F:PCSC.SCardError.CardNotAuthenticated">
            <summary>No PIN was presented to the smart card. (SCARD_W_CARD_NOT_AUTHENTICATED)</summary>
        </member>
        <member name="F:PCSC.SCardError.CardUnsupported">
            <summary>The smart card does not meet minimal requirements for support. (SCARD_E_CARD_UNSUPPORTED)</summary>
        </member>
        <member name="F:PCSC.SCardError.CertificateUnavailable">
            <summary>The requested certificate could not be obtained. (SCARD_E_CERTIFICATE_UNAVAILABLE)</summary>
        </member>
        <member name="F:PCSC.SCardError.CHVBlocked">
            <summary>The card cannot be accessed because the maximum number of PIN entry attempts has been reached. (SCARD_W_CHV_BLOCKED)</summary>
        </member>
        <member name="F:PCSC.SCardError.CommunicationDataLost">
            <summary>A communications error with the smart card has been detected. (SCARD_E_COMM_DATA_LOST)</summary>
        </member>
        <member name="F:PCSC.SCardError.CommunicationError">
            <summary>An internal communications error has been detected. (SCARD_F_COMM_ERROR)</summary>
        </member>
        <member name="F:PCSC.SCardError.DirectoryNotFound">
            <summary>The identified directory does not exist in the smart card. (SCARD_E_DIR_NOT_FOUND)</summary>
        </member>
        <member name="F:PCSC.SCardError.DuplicateReader">
            <summary>The reader driver did not produce a unique reader name. (SCARD_E_DUPLICATE_READER)</summary>
        </member>
        <member name="F:PCSC.SCardError.Eof">
            <summary>The end of the smart card file has been reached. (SCARD_W_EOF)</summary>
        </member>
        <member name="F:PCSC.SCardError.FileNotFound">
            <summary>The identified file does not exist in the smart card. (SCARD_E_FILE_NOT_FOUND)</summary>
        </member>
        <member name="F:PCSC.SCardError.ICCCreateOrder">
            <summary>The requested order of object creation is not supported. (SCARD_E_ICC_CREATEORDER)</summary>
        </member>
        <member name="F:PCSC.SCardError.ICCInstallation">
            <summary>No primary provider can be found for the smart card. (SCARD_E_ICC_INSTALLATION)</summary>
        </member>
        <member name="F:PCSC.SCardError.InsertedCard">
            <summary>The smart card has been inserted. (Obsolete)</summary>
        </member>
        <member name="F:PCSC.SCardError.InsufficientBuffer">
            <summary>The data buffer to receive returned data is too small for the returned data. (SCARD_E_INSUFFICIENT_BUFFER)</summary>
        </member>
        <member name="F:PCSC.SCardError.InternalError">
            <summary>An internal consistency check failed. (SCARD_F_INTERNAL_ERROR)</summary>
        </member>
        <member name="F:PCSC.SCardError.InvalidAtr">
            <summary>An ATR obtained from the registry is not a valid ATR string. (SCARD_E_INVALID_ATR)</summary>
        </member>
        <member name="F:PCSC.SCardError.InvalidCHV">
            <summary>The supplied PIN is incorrect. (SCARD_E_INVALID_CHV)</summary>
        </member>
        <member name="F:PCSC.SCardError.InvalidHandle">
            <summary>The supplied handle was invalid. (SCARD_E_INVALID_HANDLE)</summary>
        </member>
        <member name="F:PCSC.SCardError.InvalidParameter">
            <summary>One or more of the supplied parameters could not be properly interpreted. (SCARD_E_INVALID_PARAMETER)</summary>
        </member>
        <member name="F:PCSC.SCardError.InvalidTarget">
            <summary>Registry startup information is missing or invalid. (SCARD_E_INVALID_TARGET)</summary>
        </member>
        <member name="F:PCSC.SCardError.InvalidValue">
            <summary>One or more of the supplied parameters values could not be properly interpreted. (SCARD_E_INVALID_VALUE)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoAccess">
            <summary>Access is denied to this file. (SCARD_E_NO_ACCESS)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoDir">
            <summary>The supplied path does not represent a smart card directory. (SCARD_E_NO_DIR)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoFile">
            <summary>The supplied path does not represent a smart card file. (SCARD_E_NO_FILE)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoKeyContainer">
            <summary>The requested key container does not exist on the smart card. (SCARD_E_NO_KEY_CONTAINER)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoMemory">
            <summary>Not enough memory available to complete this command. (SCARD_E_NO_MEMORY)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoReadersAvailable">
            <summary>Cannot find a smart card reader. (SCARD_E_NO_READERS_AVAILABLE)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoService">
            <summary>The Smart card resource manager is not running. (SCARD_E_NO_SERVICE)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoSmartcard">
            <summary>The operation requires a Smart Card, but no Smart Card is currently in the device. (SCARD_E_NO_SMARTCARD)</summary>
        </member>
        <member name="F:PCSC.SCardError.NoSuchCertificate">
            <summary>The requested certificate does not exist. (SCARD_E_NO_SUCH_CERTIFICATE)</summary>
        </member>
        <member name="F:PCSC.SCardError.NotReady">
            <summary>The reader or smart card is not ready to accept commands. (SCARD_E_NOT_READY)</summary>
        </member>
        <member name="F:PCSC.SCardError.NotTransacted">
            <summary>An attempt was made to end a non-existent transaction. (SCARD_E_NOT_TRANSACTED)</summary>
        </member>
        <member name="F:PCSC.SCardError.PciTooSmall">
            <summary>The PCI Receive buffer was too small. (SCARD_E_PCI_TOO_SMALL)</summary>
        </member>
        <member name="F:PCSC.SCardError.ProtocolMismatch">
            <summary>The requested protocols are incompatible with the protocol currently in use with the smart card. (SCARD_E_PROTO_MISMATCH)</summary>
        </member>
        <member name="F:PCSC.SCardError.ReaderUnavailable">
            <summary>The specified reader is not currently available for use. (SCARD_E_READER_UNAVAILABLE)</summary>
        </member>
        <member name="F:PCSC.SCardError.ReaderUnsupported">
            <summary>The reader driver does not meet minimal requirements for support. (SCARD_E_READER_UNSUPPORTED)</summary>
        </member>
        <member name="F:PCSC.SCardError.RemovedCard">
            <summary>The smart card has been removed, so further communication is not possible. (SCARD_W_REMOVED_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardError.ResetCard">
            <summary>The smart card has been reset, so any shared state information is invalid. (SCARD_W_RESET_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardError.SecurityViolation">
            <summary>Access was denied because of a security violation. (SCARD_W_SECURITY_VIOLATION)</summary>
        </member>
        <member name="F:PCSC.SCardError.ServerTooBusy">
            <summary>The Smart Card Resource Manager is too busy to complete this operation. (SCARD_E_SERVER_TOO_BUSY)</summary>
        </member>
        <member name="F:PCSC.SCardError.ServiceStopped">
            <summary>The Smart card resource manager has shut down. (SCARD_E_SERVICE_STOPPED)</summary>
        </member>
        <member name="F:PCSC.SCardError.SharingViolation">
            <summary>The smart card cannot be accessed because of other connections outstanding. (SCARD_E_SHARING_VIOLATION)</summary>
        </member>
        <member name="F:PCSC.SCardError.Shutdown">
            <summary>The operation has been aborted to allow the server application to exit. (SCARD_P_SHUTDOWN)</summary>
        </member>
        <member name="F:PCSC.SCardError.Success">
            <summary>No error. (SCARD_S_SUCCESS)</summary>
        </member>
        <member name="F:PCSC.SCardError.SystemCancelled">
            <summary>The action was cancelled by the system, presumably to log off or shut down. (SCARD_E_SYSTEM_CANCELLED)</summary>
        </member>
        <member name="F:PCSC.SCardError.Timeout">
            <summary>The user-specified timeout value has expired. (SCARD_E_TIMEOUT)</summary>
        </member>
        <member name="F:PCSC.SCardError.Unexpected">
            <summary>An unexpected card error has occurred. (SCARD_E_UNEXPECTED)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnknownCard">
            <summary>The specified smart card name is not recognized. (SCARD_E_UNKNOWN_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnknownError">
            <summary>An internal error has been detected, but the source is unknown. (SCARD_F_UNKNOWN_ERROR)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnknownReader">
            <summary>The specified reader name is not recognized. (SCARD_E_UNKNOWN_READER)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnknownResMng">
            <summary>An unrecognized error code was returned from a layered component. (SCARD_E_UNKNOWN_RES_MNG)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnpoweredCard">
            <summary>Power has been removed from the smart card, so that further communication is not possible. (SCARD_W_UNPOWERED_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnresponsiveCard">
            <summary>The smart card is not responding to a reset. (SCARD_W_UNRESPONSIVE_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnsupportedCard">
            <summary>The reader cannot communicate with the card, due to ATR string configuration conflicts. (SCARD_W_UNSUPPORTED_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardError.UnsupportedFeature">
            <summary>Feature not supported. (SCARD_E_UNSUPPORTED_FEATURE)</summary>
        </member>
        <member name="F:PCSC.SCardError.WaitedTooLong">
            <summary>An internal consistency timer has expired. (SCARD_F_WAITED_TOO_LONG)</summary>
        </member>
        <member name="F:PCSC.SCardError.WriteTooMany">
            <summary>The smart card does not have enough memory to store the information. (SCARD_E_WRITE_TOO_MANY)</summary>
        </member>
        <member name="F:PCSC.SCardError.WrongCHV">
            <summary>The card cannot be accessed because the wrong PIN was presented. (SCARD_W_WRONG_CHV)</summary>
        </member>
        <member name="T:PCSC.SCardHelper">
            <summary>Helper class that offers methods to convert various values into strings.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.SCardHelper">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.SCardHelper.GetAttrDesc``1(``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="attr">Enumeration attribute.</param>
            <summary>Returns a description string of an enumeration attribute.</summary>
            <returns>If available: a description string of the specified attribute. Otherwise null.</returns>
            <remarks />
        </member>
        <member name="M:PCSC.SCardHelper.StringifyError(PCSC.SCardError)">
            <param name="code">Error or return code.</param>
            <summary>Returns a human readable text for the given PC/SC error code.</summary>
            <returns>A human readable string.</returns>
            <remarks>Warning! This method behaves differently compared to the original PC/SC-Lite pcsc_stringify_error function. Instead of the (const) variable name it returns a short text description.</remarks>
        </member>
        <member name="T:PCSC.SCardMonitor">
            <summary>Monitors a Smart Card reader and triggers events on status changes.</summary>
            <remarks>Creates a new thread and calls the <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" /> of the given <see cref="T:PCSC.SCardContext" /> object.</remarks>
        </member>
        <member name="C:PCSC.SCardMonitor(PCSC.SCardContext)">
            <param name="hContext">A new Application Context to the PC/SC Resource Manager.</param>
            <summary>Creates a new SCardMonitor object that is able to listen for certain Smart Card / reader changes.</summary>
            <remarks>The monitor object should use its own Application Context to the PC/SC Resource Manager. It will create a (new) backgroud thread that will listen for status changes.</remarks>
        </member>
        <member name="C:PCSC.SCardMonitor(PCSC.SCardContext,PCSC.SCardScope)">
            <param name="hContext">A new Application Context to the PC/SC Resource Manager.</param>
            <param name="scope">Scope of the establishment. This can either be a local or remote connection.</param>
            <summary>Creates a new SCardMonitor object that is able to listen for certain Smart Card / reader changes.</summary>
            <remarks>The monitor object should use its own Application Context to the PC/SC Resource Manager. It will create a (new) backgroud thread that will listen for status changes.</remarks>
        </member>
        <member name="M:PCSC.SCardMonitor.Cancel">
            <summary>Cancels the monitoring of all readers that are currently being monitored.</summary>
            <remarks>This will end the monitoring. The method calls the <see cref="M:PCSC.SCardContext.Cancel()" /> method of its Application Context to the PC/SC Resource Manager.</remarks>
        </member>
        <member name="E:PCSC.SCardMonitor.CardInserted">
            <summary>A new card has been inserted.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardInsertedMethod.
monitor.CardInserted += new CardInsertedEvent(MyCardInsertedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="E:PCSC.SCardMonitor.CardRemoved">
            <summary>A card has been removed.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardRemovedMethod.
monitor.CardRemoved += new CardRemovedEvent(MyCardRemovedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardMonitor.Dispose">
            <summary>Disposes the object.</summary>
            <remarks>Dispose will call <see cref="M:PCSC.SCardMonitor.Cancel()" />.</remarks>
        </member>
        <member name="M:PCSC.SCardMonitor.Finalize">
            <summary />
            <remarks />
        </member>
        <member name="M:PCSC.SCardMonitor.GetCurrentState(System.Int32)">
            <param name="index">The number of the desired reader. The index must be between 0 and (<see cref="P:PCSC.SCardMonitor.ReaderCount" /> - 1).</param>
            <summary>Returns the current state of a reader that is currently being monitored.</summary>
            <returns>The current state of reader with index number <paramref name="index" />.</returns>
            <remarks>This method will throw an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="index" /> is invalid. You can enumerate all readers currently monitored with the <see cref="P:PCSC.SCardMonitor.ReaderNames" /> property.</remarks>
        </member>
        <member name="M:PCSC.SCardMonitor.GetCurrentStateValue(System.Int32)">
            <param name="index">The number of the desired reader. The index must be between 0 and (<see cref="P:PCSC.SCardMonitor.ReaderCount" /> - 1).</param>
            <summary>Returns the current state of a reader that is currently being monitored.</summary>
            <returns>The current state of reader with index number <paramref name="index" />.</returns>
            <remarks>This method will throw an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="index" /> is invalid. You can enumerate all readers currently monitored with the <see cref="P:PCSC.SCardMonitor.ReaderNames" /> property.</remarks>
        </member>
        <member name="M:PCSC.SCardMonitor.GetReaderName(System.Int32)">
            <param name="index">The number of the desired reader. The index must be between 0 and (<see cref="P:PCSC.SCardMonitor.ReaderCount" /> - 1).</param>
            <summary>Returns the reader name of a given <paramref name="index" />.</summary>
            <returns>A reader name.</returns>
            <remarks>This method will throw an <see cref="T:System.ArgumentOutOfRangeException" /> if the specified <paramref name="index" /> is invalid. You can enumerate all readers currently monitored with the <see cref="P:PCSC.SCardMonitor.ReaderNames" /> property.</remarks>
        </member>
        <member name="E:PCSC.SCardMonitor.Initialized">
            <summary>The monitor object has been initialized.</summary>
            <remarks>
                <para>
This event appears only once for each reader after calling <see cref="M:PCSC.SCardMonitor.Start(string)" /> or <see cref="M:PCSC.SCardMonitor.Start(string[])" />.
</para>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyCardInitializedMethod.
monitor.Initialized += new CardInitializedEvent(MyCardInitializedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="E:PCSC.SCardMonitor.MonitorException">
            <summary>An PC/SC error occurred during monitoring.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyMonitorExceptionMethod.
monitor.MonitorException += new MonitorExceptionEvent(MyMonitorExceptionMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="P:PCSC.SCardMonitor.Monitoring">
            <summary>Indicates if there are readers currently monitored.</summary>
            <value>
                <list type="table">
                    <listheader>
                        <term>Value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see langword="true" />
                        </term>
                        <description>Monitoring process ongoing.</description>
                    </item>
                    <item>
                        <term>
                            <see langword="false" />
                        </term>
                        <description>No monitoring.</description>
                    </item>
                </list>
            </value>
            <remarks />
        </member>
        <member name="P:PCSC.SCardMonitor.ReaderCount">
            <summary>The number of readers that currently being monitored.</summary>
            <value>Return 0 if no reader is being monitored.</value>
            <remarks />
        </member>
        <member name="P:PCSC.SCardMonitor.ReaderNames">
            <summary>All readers that are currently being monitored.</summary>
            <value>A <see cref="T:System.String" /> array of reader names. <see langword="null" /> if no readers is being monitored.</value>
            <remarks />
        </member>
        <member name="M:PCSC.SCardMonitor.Start(System.String)">
            <param name="readername">The Smart Card reader that shall be monitored.</param>
            <summary>Starts to monitor a single Smart Card reader for status changes.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a new monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Start to monitor a single reader.
monitor.Start("OMNIKEY CardMan 5x21 00 00");

  </code>
                </example>
                <para>
Do not forget to register for at least one event:

<list type="table"><listheader><term>Event</term><description>Description</description></listheader><item><term><see cref="E:PCSC.SCardMonitor.CardInserted" /></term><description>A new card has been inserted.</description></item><item><term><see cref="E:PCSC.SCardMonitor.CardRemoved" /></term><description>A card has been removed.</description></item><item><term><see cref="E:PCSC.SCardMonitor.Initialized" /></term><description>Initial status.</description></item><item><term><see cref="E:PCSC.SCardMonitor.StatusChanged" /></term><description>A general status change.</description></item><item><term><see cref="E:PCSC.SCardMonitor.MonitorException" /></term><description>An error occurred.</description></item></list></para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardMonitor.Start(System.String[])">
            <param name="readernames">A <see cref="T:System.String" /> array of reader names that shall be monitored.</param>
            <summary>Starts to monitor a range Smart Card readers for status changes.</summary>
            <remarks>
                <example>
                    <code lang="C#">
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Retrieve the names of all installed readers.
string[] readernames = ctx.GetReaders();

ctx.Release();

// Create a new monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

foreach (string reader in readernames)
	Console.WriteLine("Start monitoring for reader " + reader + ".");
        
// Start monitoring multiple readers.
monitor.Start(readernames);
</code>
                </example>
                <para>
Do not forget to register for at least one event:

<list type="table"><listheader><term>Event</term><description>Description</description></listheader><item><term><see cref="E:PCSC.SCardMonitor.CardInserted" /></term><description>A new card has been inserted.</description></item><item><term><see cref="E:PCSC.SCardMonitor.CardRemoved" /></term><description>A card has been removed.</description></item><item><term><see cref="E:PCSC.SCardMonitor.Initialized" /></term><description>Initial status.</description></item><item><term><see cref="E:PCSC.SCardMonitor.StatusChanged" /></term><description>A general status change.</description></item><item><term><see cref="E:PCSC.SCardMonitor.MonitorException" /></term><description>An error occurred.</description></item></list></para>
            </remarks>
        </member>
        <member name="E:PCSC.SCardMonitor.StatusChanged">
            <summary>A general reader status change.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyStatusChangedMethod.
monitor.StatusChanged += new StatusChangeEvent(MyStatusChangedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="T:PCSC.SCardPCI">
            <summary>Structure of protocol information.</summary>
            <remarks>
                <para>
Is a structure containing the following: 
</para>
                <para>
                    <example>
                        <code lang="C">
typedef struct {
	DWORD dwProtocol;    // SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
	DWORD cbPciLength;   // Length of this structure - not used
} SCARD_IO_REQUEST;
</code>
                    </example>
                </para>
                <para>
The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
            </remarks>
        </member>
        <member name="C:PCSC.SCardPCI">
            <summary>Creates a new SCardPCI object.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.SCardPCI(PCSC.SCardProtocol,System.Byte[])">
            <param name="protocol">
                <list type="table">
                    <listheader>
                        <term>Protocol Control Information</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.T0" />
                        </term>
                        <description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.T1" />
                        </term>
                        <description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.Raw" />
                        </term>
                        <description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description>
                    </item>
                </list>
            </param>
            <param name="pcidata">User data.</param>
            <summary>Creates a new SCardPCI object.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.SCardPCI(PCSC.SCardProtocol,System.Int32)">
            <param name="protocol">
                <list type="table">
                    <listheader>
                        <term>Protocol Control Information</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.T0" />
                        </term>
                        <description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.T1" />
                        </term>
                        <description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.Raw" />
                        </term>
                        <description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description>
                    </item>
                </list>
            </param>
            <param name="buflength">Size of this structure in bytes.</param>
            <summary>Creates a new SCardPCI object.</summary>
            <remarks />
        </member>
        <member name="P:PCSC.SCardPCI.Data">
            <summary>User data.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:PCSC.SCardPCI.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.SCardPCI.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.SCardPCI.GetPci(PCSC.SCardProtocol)">
            <param name="proto">The desired protocol.</param>
            <summary>Receives a PCI pointer to a given protocol.</summary>
            <returns>A pointer to the PCI structure in the native system library.</returns>
            <remarks>This pointer to the pre-defined / built-in PCI structure is determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</remarks>
        </member>
        <member name="P:PCSC.SCardPCI.PciLength">
            <summary>Size of this structure in bytes.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:PCSC.SCardPCI.Protocol">
            <summary>Protocol</summary>
            <value>
                <list type="table">
                    <listheader>
                        <term>Protocol Control Information</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.T0" />
                        </term>
                        <description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.T1" />
                        </term>
                        <description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="P:PCSC.SCardPCI.Raw" />
                        </term>
                        <description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description>
                    </item>
                </list>
            </value>
            <remarks />
        </member>
        <member name="P:PCSC.SCardPCI.Raw">
            <summary>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</summary>
            <value>A pointer to the C structure in the system library.</value>
            <remarks>This pointer to the pre-defined / built-in PCI structure is determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</remarks>
        </member>
        <member name="P:PCSC.SCardPCI.T0">
            <summary>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</summary>
            <value>A pointer to the C structure in the system library.</value>
            <remarks>This pointer to the pre-defined / built-in PCI structure is determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</remarks>
        </member>
        <member name="P:PCSC.SCardPCI.T1">
            <summary>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</summary>
            <value>A pointer to the C structure in the system library.</value>
            <remarks>This pointer to the pre-defined / built-in PCI structure is determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.</remarks>
        </member>
        <member name="T:PCSC.SCardProtocol">
            <summary>Communication protocol use with the Smart Card.</summary>
            <remarks>This is a bit mask of acceptable protocols for the connection. You can use (<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />) if you do not have a preferred protocol. </remarks>
        </member>
        <member name="F:PCSC.SCardProtocol.Any">
            <summary>(<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />). IFD determines prot.</summary>
        </member>
        <member name="F:PCSC.SCardProtocol.Raw">
            <summary>Raw active protocol. Use with memory type cards.</summary>
        </member>
        <member name="F:PCSC.SCardProtocol.T0">
            <summary>T=0 active protocol.</summary>
        </member>
        <member name="F:PCSC.SCardProtocol.T1">
            <summary>T=1 active protocol.</summary>
        </member>
        <member name="F:PCSC.SCardProtocol.T15">
            <summary>T=15 protocol.</summary>
        </member>
        <member name="F:PCSC.SCardProtocol.Unset">
            <summary>Protocol not defined.</summary>
        </member>
        <member name="T:PCSC.SCardReader">
            <summary>Operates on a Smart Card reader.</summary>
            <remarks>Implements the most basic PC/SC functions.</remarks>
        </member>
        <member name="C:PCSC.SCardReader(PCSC.SCardContext)">
            <param name="context">Connection context to the PC/SC Resource Manager. </param>
            <summary>Creates a new Smart Card reader object.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create PC/SC context
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Create reader object and connect to the Smart Card
SCardReader myReader = new SCardReader(ctx);
SCardError rc = myReader.Connect(
	"OMNIKEY CardMan 5321", 
	SCardShareMode.Shared, 
	SCardProtocol.T1);
  </code>
                </example>
            </remarks>
        </member>
        <member name="P:PCSC.SCardReader.ActiveProtocol">
            <summary>The currently used protocol to communicate with the card.</summary>
            <value>
                <see cref="F:PCSC.SCardProtocol.Unset" /> if not connected.</value>
            <remarks />
        </member>
        <member name="M:PCSC.SCardReader.BeginTransaction">
            <summary>Establishes a temporary exclusive access mode for doing a serie of commands in a transaction. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid hCard handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.SharingViolation" />
                        </term>
                        <description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
You might want to use this when you are selecting a few files and then writing a large file so you can make sure that another application will not change the current file. If another application has a lock on this reader or this application is in <see cref="F:PCSC.SCardShareMode.Exclusive" /> there will be no action taken.
</para>
                <para>
This method calls the API function SCardBeginTransaction().
</para>
            </remarks>
        </member>
        <member name="P:PCSC.SCardReader.CardHandle">
            <summary>A pointer (Card Handle) that can be used for C API calls.</summary>
            <value>0 if not connected.</value>
            <remarks>
                <para>
This is the card handle that is returned when calling the C API function SCardConnect().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)">
            <param name="name">Reader name to connect to. </param>
            <param name="mode">Mode of connection type: exclusive or shared.</param>
            <param name="prefProto">Desired protocol use.</param>
            <summary>Establishes a connection to the Smart Card reader.</summary>
            <returns>An error code / return value:

<list type="table"><listheader><term>Error code</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardError.Success" /></term><description>Successful (SCARD_S_SUCCESS)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidHandle" /></term><description>Invalid context handle (SCARD_E_INVALID_HANDLE)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidParameter" /></term><description><paramref name="prefProto" /> is invalid or <see langword="null" />  (SCARD_E_INVALID_PARAMETER)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidValue" /></term><description>Invalid sharing mode, requested protocol, or reader name (SCARD_E_INVALID_VALUE)</description></item><item><term><see cref="F:PCSC.SCardError.NoService" /></term><description>The server is not runing (SCARD_E_NO_SERVICE)</description></item><item><term><see cref="F:PCSC.SCardError.NoSmartCard" /></term><description>No smart card present (SCARD_E_NO_SMARTCARD)</description></item><item><term><see cref="F:PCSC.SCardError.NotReady" /></term><description>Could not allocate the desired port (SCARD_E_NOT_READY)</description></item><item><term><see cref="F:PCSC.SCardError.ProtocolMismatch" /></term><description>Requested protocol is unknown (SCARD_E_PROTO_MISMATCH)</description></item><item><term><see cref="F:PCSC.SCardError.ReaderUnavailable" /></term><description>Could not power up the reader or card (SCARD_E_READER_UNAVAILABLE)</description></item><item><term><see cref="F:PCSC.SCardError.SharingViolation" /></term><description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description></item><item><term><see cref="F:PCSC.SCardError.UnknownReader" /></term><description>The reader name is <see langword="null" /> (SCARD_E_UNKNOWN_READER)</description></item><item><term><see cref="F:PCSC.SCardError.UnsupportedFeature" /></term><description>Protocol not supported (SCARD_E_UNSUPPORTED_FEATURE)</description></item><item><term><see cref="F:PCSC.SCardError.CommunicationError" /></term><description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.InternalError" /></term><description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.UnpoweredCard" /></term><description>Card is not powered (SCARD_W_UNPOWERED_CARD)</description></item><item><term><see cref="F:PCSC.SCardError.UnresponsiveCard" /></term><description>Card is mute (SCARD_W_UNRESPONSIVE_CARD)</description></item></list></returns>
            <remarks>
                <para>
                    <paramref name="prefProto" />  is a bit mask of acceptable protocols for the connection. You can use (<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />) if you do not have a preferred protocol.
The protocol used with this connection will be stored in <see cref="P:PCSC.SCardReader.ActiveProtocol" />.
</para>
                <para>
This method calls the API function SCardConnect().
</para>
                <example>
                    <code lang="C#">
// Establish PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Create a Smart Card reader object and connect to it.
SCardReader reader = new SCardReader(ctx);
SCardError serr = reader.Connect("OMNIKEY CardMan 5x21 00 00",
	SCardShareMode.Shared,
	SCardProtocol.Any);
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Control(System.IntPtr,System.Byte[],System.Byte[]@)">
            <param name="ControlCode">Control code for the operation. </param>
            <param name="SendBuffer">Command to send to the reader.</param>
            <param name="RecvBuffer">Response from the reader.</param>
            <summary>Sends a command directly to the IFD Handler (reader driver) to be processed by the reader.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> is <see langword="null" /> and the IFDHandler is version 2.0 (without <paramref name="controlCode" />) (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid value was presented (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed(SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.UnsupportedFeature" />
                        </term>
                        <description>Driver does not support (SCARD_E_UNSUPPORTED_FEATURE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader(SCARD_W_REMOVED_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method is useful for creating client side reader drivers for functions like PIN pads, biometrics, or other extensions to the normal smart card reader that are not normally handled by PC/SC.
</para>
                <para>
This method calls the API function SCardControl().
</para>
                <block subset="none" type="note">
                    <para>
    The API of this function changed. In pcsc-lite 1.2.0 and before the API was not Windows(R) PC/SC compatible. This has been corrected.
  </para>
                </block>
            </remarks>
        </member>
        <member name="P:PCSC.SCardReader.CurrentContext">
            <summary>The Smart Card context that will be used for this connection.</summary>
            <value>
                <see langword="null" /> if the reader is not connected.</value>
            <remarks />
        </member>
        <member name="P:PCSC.SCardReader.CurrentShareMode">
            <summary>The current mode of connection type: exclusive or shared.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:PCSC.SCardReader.Disconnect(PCSC.SCardReaderDisposition)">
            <param name="discntExec">Reader function to execute.</param>
            <summary>Terminates a connection made through <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid <paramref name="discntExec" /> (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoSmartcard" />
                        </term>
                        <description>No smart card present (SCARD_E_NO_SMARTCARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method calls the API function SCardDisconnect().
</para>
                <example>
                    <code lang="C#">
// Establish PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Create a Smart Card reader object and connect to it.
SCardReader reader = new SCardReader(ctx);
SCardError serr = reader.Connect("OMNIKEY",
	SCardShareMode.Shared,
	SCardProtocol.Any);

// Disconnect the reader and reset the SmartCard.
reader.Disconnect(SCardReaderDisposition.Reset);
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.EndTransaction(PCSC.SCardReaderDisposition)">
            <param name="disposition">Action to be taken on the reader.</param>
            <summary>Ends a previously begun transaction. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid value for <paramref name="disposition" /> (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.SharingViolation" />
                        </term>
                        <description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The calling application must be the owner of the previously begun transaction or an error will occur.
</para>
                <para>
This method calls the API function SCardEndTransaction().
</para>
                <block subset="none" type="note">
                    <para>
The disposition action is not currently used in PC/SC Lite on UNIX/Linux machines.
  </para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[]@)">
            <param name="AttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method calls the API function SCardGetAttrib().
</para>
                <example>
                    <code lang="C#">
// Helper function that translates a byte array into an hex-encoded ATR string.
static string StringAtr(byte[] atr)
{
	if (atr == null)
	return null;

	StringBuilder sb = new StringBuilder();
	foreach (byte b in atr)
		sb.AppendFormat("{0:X2}", b);

	return sb.ToString();
}
  </code>
                </example>
                <example>
                    <code lang="C#">
// Create a new PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

string[] readernames = ctx.GetReaders();
if (readernames == null || readernames.Length == 0)
	throw new Exception("You need at least one reader in order to run this example.");

// Receive the ATR of each reader by using the GetAttrib function
foreach (string name in readernames)
{
	SCardReader reader = new SCardReader(ctx);

	Console.Write("Trying to connect to reader.. " + name);
                
	// Connect to the reader, error if no card present.
	SCardError rc = reader.Connect(
		name,
		SCardShareMode.Exclusive,
		SCardProtocol.Any);

	if (rc == SCardError.Success)
	{
		// Reader is now connected.
		Console.WriteLine(" done.");

		// receive ATR string attribute
		byte[] atr;
		rc = reader.GetAttrib(SCardAttr.ATRString, out atr);

		if (rc != SCardError.Success)
		{
			// ATR not supported?
			Console.WriteLine("Error by trying to receive the ATR. "
				+ SCardHelper.StringifyError(rc) + "\n");
		} else {
			Console.WriteLine("ATR: " + StringAtr(atr) + "\n");
		}

		// Disconnect
		reader.Disconnect(SCardReaderDisposition.Leave);
	} else  {
		// Probably no SmartCard present.
		Console.WriteLine(" failed. " + SCardHelper.StringifyError(rc) + "\n");
	}
}
ctx.Release();
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.GetAttrib(System.IntPtr,System.Byte[]@)">
            <param name="AttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough  - indicates an error in the PC/SC class library. (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
This method calls the API function SCardGetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[],System.Int32@)">
            <param name="AttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <param name="AttrLen">Size of the result contained in pbAttr (in bytes).</param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The method will return <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if <paramref name="pbAttr" /> is <see langword="null" /> or if the buffer size is not sufficient. <paramref name="AttrLen" /> contains the required amount of bytes (size).
</para>
                <para>
If the method returned with <see cref="F:PCSC.SCardError.Success" /> then
<paramref name="AttrLen" /> contains the exact size of the result in <paramref name="pbAttr" />.
</para>
                <para>
For an example please see <see cref="M:PCSC.SCardReader.GetAttrib(PCSC.SCardAttr,System.Byte[]@)" />.
</para>
                <para>
This method calls the API function SCardGetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.GetAttrib(System.IntPtr,System.Byte[],System.Int32@)">
            <param name="dwAttrId">Identifier for the attribute to get.</param>
            <param name="pbAttr">A buffer that receives the attribute. </param>
            <param name="AttrLen">Size of the result contained in pbAttr (in bytes).</param>
            <summary>Gets an attribute from the IFD Handler (reader driver).</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return code</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="pbAttr" /> is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>Reader buffer <paramref name="pbAttr" /> not large enough (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The method will return <see cref="F:PCSC.SCardError.InsufficientBuffer" /> if <paramref name="pbAttr" /> is <see langword="null" /> or if the buffer size is not sufficient. <paramref name="AttrLen" /> contains the required amount of bytes (size).
</para>
                <para>
If the method returned with <see cref="F:PCSC.SCardError.Success" /> then
<paramref name="AttrLen" /> contains the exact size of the result in <paramref name="pbAttr" />.
</para>
                <para>
This method calls the API function SCardGetAttrib().
</para>
            </remarks>
        </member>
        <member name="P:PCSC.SCardReader.Infinite">
            <summary>Infinite timeout.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:PCSC.SCardReader.ReaderName">
            <summary>The connected reader's friendly name.</summary>
            <value>A human readable string of the reader name or <see langword="null" /> if the reader object is currently not connected.</value>
            <remarks />
        </member>
        <member name="M:PCSC.SCardReader.Reconnect(PCSC.SCardShareMode,PCSC.SCardProtocol,PCSC.SCardReaderDisposition)">
            <param name="mode">Mode of connection type: exclusive/shared. 

<list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardShareMode.Shared" /></term><description>This application will allow others to share the reader. (SCARD_SHARE_SHARED)</description></item><item><term><see cref="F:PCSC.SCardShareMode.Exclusive" /></term><description>This application will NOT allow others to share the reader. (SCARD_SHARE_EXCLUSIVE)</description></item></list></param>
            <param name="prefProto">Desired protocol use.</param>
            <param name="initExec">Desired action taken on the card/reader.</param>
            <summary>Reestablishes a connection to a reader that was previously connected to using <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />.</summary>
            <returns>An error code / return value:
<list type="table"><listheader><term>Error code</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardError.Success" /></term><description>Successful (SCARD_S_SUCCESS)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidHandle" /></term><description>Invalid context handle (SCARD_E_INVALID_HANDLE)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidParameter" /></term><description><paramref name="prefProto" /> is invalid or <see langword="null" />  (SCARD_E_INVALID_PARAMETER)</description></item><item><term><see cref="F:PCSC.SCardError.InvalidValue" /></term><description>Invalid sharing mode, requested protocol, or reader name (SCARD_E_INVALID_VALUE)</description></item><item><term><see cref="F:PCSC.SCardError.NoService" /></term><description>The server is not runing (SCARD_E_NO_SERVICE)</description></item><item><term><see cref="F:PCSC.SCardError.NoSmartCard" /></term><description>No smart card present (SCARD_E_NO_SMARTCARD)</description></item><item><term><see cref="F:PCSC.SCardError.NotReady" /></term><description>Could not allocate the desired port (SCARD_E_NOT_READY)</description></item><item><term><see cref="F:PCSC.SCardError.ProtocolMismatch" /></term><description>Requested protocol is unknown (SCARD_E_PROTO_MISMATCH)</description></item><item><term><see cref="F:PCSC.SCardError.ReaderUnavailable" /></term><description>Could not power up the reader or card (SCARD_E_READER_UNAVAILABLE)</description></item><item><term><see cref="F:PCSC.SCardError.SharingViolation" /></term><description>Someone else has exclusive rights (SCARD_E_SHARING_VIOLATION)</description></item><item><term><see cref="F:PCSC.SCardError.UnsupportedFeature" /></term><description>Protocol not supported (SCARD_E_UNSUPPORTED_FEATURE)</description></item><item><term><see cref="F:PCSC.SCardError.CommunicationError" /></term><description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.InternalError" /></term><description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description></item><item><term><see cref="F:PCSC.SCardError.RemovedCard" /></term><description>The smart card has been removed (SCARD_W_REMOVED_CARD)</description></item><item><term><see cref="F:PCSC.SCardError.UnresponsiveCard" /></term><description>Card is mute (SCARD_W_UNRESPONSIVE_CARD)</description></item></list></returns>
            <remarks>
                <para>
                    <paramref name="prefProto" />  is a bit mask of acceptable protocols for the connection. You can use (<see cref="F:PCSC.SCardProtocol.T0" /> | <see cref="F:PCSC.SCardProtocol.T1" />) if you do not have a preferred protocol.
The protocol used with this connection will be stored in <see cref="P:PCSC.ISCardReader.ActiveProtocol" />.
</para>
                <para>
This method calls the API function SCardReconnect().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.SetAttrib(PCSC.SCardAttr,System.Byte[])">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.SetAttrib(System.IntPtr,System.Byte[])">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.SetAttrib(PCSC.SCardAttr,System.Byte[],System.Int32)">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <param name="AttrSize">Length of the <paramref name="pbAttr" /> buffer in bytes.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.SetAttrib(System.IntPtr,System.Byte[],System.Int32)">
            <param name="attr">Identifier for the attribute to set.</param>
            <param name="pbAttr">Buffer that contains the new value of the attribute.</param>
            <param name="AttrSize">Length of the <paramref name="pbAttr" /> buffer in bytes.</param>
            <summary>Set an attribute of the IFD Handler.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Column</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>pbAttr is too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>A parameter is <see langword="null" /> and should not (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>Data exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The list of attributes you can set is dependent on the IFD Handler you are using.
</para>
                <para>
This method calls the API function SCardSetAttrib().
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Status(System.String[]@,PCSC.SCardState@,PCSC.SCardProtocol@,System.Byte[]@)">
            <param name="ReaderName">The connected readers's friendly name.</param>
            <param name="State">The current state.</param>
            <param name="Protocol">The card's currently used protocol.</param>
            <param name="Atr">The card's ATR.</param>
            <summary>Returns the current status of the reader and the connected card.</summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description>Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>The reader object did not allocate enough memory for <paramref name="ReaderName" /> or for <paramref name="Atr" /> (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>The reader object got invalid. Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>The reader object passed a size of null for <paramref name="ReaderName" /> or <paramref name="Atr" />  (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoMemory" />
                        </term>
                        <description>Memory allocation failed (SCARD_E_NO_MEMORY)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description> The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InternalError" />
                        </term>
                        <description>An internal consistency check failed (SCARD_F_INTERNAL_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The smart card has been removed (SCARD_W_REMOVED_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The smart card has been reset (SCARD_W_RESET_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The connected readers's friendly name will be stored in <paramref name="ReaderName" />. The card's ATR will be stored in <paramref name="Atr" />. The current state, and protocol will be stored in <paramref name="State" /> and <paramref name="Protocol" /> respectively.
</para>
                <para>
This method calls the API function SCardStatus().
</para>
                <example>
                    <code lang="C#">
// Create a new PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// retrieve all reader names
string[] readernames = ctx.GetReaders();

if (readernames != null)
{
	// get the card status of each reader that is currently connected
	foreach (string readername in readernames)
	{
		SCardReader reader = new SCardReader(ctx);
		Console.Write("Trying to connect to reader " + readername + "..");

		SCardError serr = reader.Connect(readername,
			SCardShareMode.Shared,
			SCardProtocol.Any);

		if (serr == SCardError.Success)
		{
			// SmartCard inserted, reader is now connected.
			Console.WriteLine(" done.");

			string[] tmpreadernames;
			SCardProtocol proto;
			SCardState state;
			byte[] atr;

			serr = reader.Status(
				out tmpreadernames, // contains the reader name(s)
				out state,          // contains the current state (flags)
				out proto,          // contains the currently used communication protocol
				out atr);           // contains the card ATR

			if (serr == SCardError.Success)
			{
				Console.WriteLine("Connected with protocol " +
					proto + " in state " + state);
				if (atr != null &amp;&amp; atr.Length != 0)
				{
					Console.Write("Card ATR: ");
					foreach (byte b in atr)
						Console.Write("{0:X2}", b);
					Console.WriteLine();
				}
				Console.WriteLine();
			} else {
				Console.WriteLine("Unable to retrieve card status.\nError message: "
					+ SCardHelper.StringifyError(serr)
					+ ".\n");
			}

			reader.Disconnect(SCardReaderDisposition.Reset);
		} else {
			/* SmardCard not inserted or reader is reserved exclusively by
				another application. */
			Console.WriteLine(" failed.\nError message: "
				+ SCardHelper.StringifyError(serr) + ".\n");
		}
	}
}
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Transmit(System.Byte[],System.Byte[]@)">
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="recvBuffer">Response from the card.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />.  The buffer <paramref name="recvBuffer" /> must be initialized and will be resized, if the buffer was too big.
</para>
                <para>
This method calls the API function SCardTransmit().
</para>
                <block subset="none" type="note">
                    <para>
This method will only work if the reader has been connected with one of the following protocols:

<list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Transmit(System.Byte[],System.Byte[],System.Int32@)">
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="recvBuffer">Response from the card.</param>
            <param name="recvBufferLength">The buffer size of <paramref name="recvBuffer" /> in bytes.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />.  The buffer <paramref name="recvBuffer" /> must be initialized. The size of the returned data will be stored in <paramref name="recvBufferLength" />. This method will return with error code <see cref="E:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="recvBuffer" /> is too small for the result. If the parameter <paramref name="recvBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.
</para>
                <para>
This method calls the API function SCardTransmit().
</para>
                <block subset="none" type="note">
                    <para>
This method will only work if the reader has been connected with one of the following protocols:

<list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Transmit(System.IntPtr,System.Byte[],System.Byte[]@)">
            <param name="pioSendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:

<list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="recvBuffer">Response from the card.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. 
</para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Transmit(PCSC.SCardPCI,System.Byte[],PCSC.SCardPCI,System.Byte[]@)">
            <param name="ioSendPci">Structure of Protocol Control Information.</param>
            <param name="sendBuffer">APDU to send to the card.</param>
            <param name="ioRecvPci">Structure of protocol information.</param>
            <param name="recvBuffer">Response from the card.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. <paramref name="ioSendPci" /> and <paramref name="ioRecvPci" /> are structures containing the following (implemented in <see cref="T:PCSC.SCardPCI" />): 

<example><code lang="C">
typedef struct {
	DWORD dwProtocol;    // SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
	DWORD cbPciLength;   // Length of this structure - not used
} SCARD_IO_REQUEST;
  </code></example></para>
                <para>
It is recommended to use pre-defined / built-in PCI structures by calling one of the following methods:
<list type="bullet"><item><term><see cref="M:PCSC.SCardReader.Transmit(System.IntPtr,System.Byte[],PCSC.SCardPCI,System.Byte[]@)" /></term></item><item><term><see cref="M:PCSC.SCardReader.Transmit(System.IntPtr,System.Byte[],System.Byte[]@)" /></term></item></list></para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Transmit(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="sendBufferLength">The buffer size of <paramref name="sendBuffer" /> in bytes.</param>
            <param name="recvBuffer">Response from the card.</param>
            <param name="recvBufferLength">The buffer size of <paramref name="recvBuffer" /> in bytes.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />.  The buffer <paramref name="recvBuffer" /> must be initialized. The size of the returned data will be stored in <paramref name="recvBufferLength" />. This method will return with error code <see cref="E:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="recvBuffer" /> is too small for the result. If one of the parameters <paramref name="sendBufferLength" /> or <paramref name="recvBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.
</para>
                <para>
This method calls the API function SCardTransmit().
</para>
                <block subset="none" type="note">
                    <para>
This method will only work if the reader has been connected with one of the following protocols:

<list type="table"><listheader><term>Protocol</term><description>Description</description></listheader><item><term><see cref="F:PCSC.SCardProtocol.T0" /></term><description>T=0 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.T1" /></term><description>T=1 active protocol.</description></item><item><term><see cref="F:PCSC.SCardProtocol.Raw" /></term><description>Raw active protocol.</description></item></list></para>
                </block>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Transmit(System.IntPtr,System.Byte[],PCSC.SCardPCI,System.Byte[]@)">
            <param name="pioSendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:

<list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="ioRecvPci">Structure of protocol information. </param>
            <param name="recvBuffer">Response from the card. </param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.SCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. <paramref name="ioRecvPci" /> is a structure containing the following (implemented in <see cref="T:PCSC.SCardPCI" />): 

<example><code lang="C">
typedef struct {
	DWORD dwProtocol;    // SCARD_PROTOCOL_T0 or SCARD_PROTOCOL_T1
	DWORD cbPciLength;   // Length of this structure - not used
} SCARD_IO_REQUEST;
  </code></example></para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
                <example>
                    <code lang="C#">
// Create a new PC/SC context.
SCardContext ctx = new SCardContext();
ctx.Establish(SCardScope.System);

// Connect to the reader
SCardReader RFIDReader = new SCardReader(ctx);
SCardError rc = RFIDReader.Connect(
	"OMNIKEY CardMan 5x21 00 01", 
	SCardShareMode.Shared, 
	SCardProtocol.T1);

if (rc != SCardError.Success) {
	Console.WriteLine("Unable to connect to RFID card / chip. Error: " +
		SCardHelper.StringifyError(rc));
	return;
}

// prepare APDU
byte[] ucByteSend = new byte[] 
	{
		0xFF,   // the instruction class
		0xCA,   // the instruction code 
		0x00,   // parameter to the instruction
		0x00,   // parameter to the instruction
		0x00    // size of I/O transfer
	};
byte[] ucByteReceive = new byte[10];

Console.Out.WriteLine("Retrieving the UID .... ");

rc = RFIDReader.BeginTransaction();
if (rc != SCardError.Success)
	throw new Exception("Could not begin transaction.");

SCardPCI ioreq = new SCardPCI();   // IO returned protocol control information.

rc = RFIDReader.Transmit(
	SCardPCI.T1,/* Protocol control information, T0, T1 and Raw
	             * are global defined protocol header structures. */
	ucByteSend, /* the actual data to be written to the card */
	ioreq,      /* The returned protocol control information */
	ref ucByteReceive);

if (rc == SCardError.Success)
{
	Console.Write("Uid: ");
	for (int i = 0; i &lt; (ucByteReceive.Length); i++)
		Console.Write("{0:X2} ", ucByteReceive[i]);
	Console.WriteLine("");
} 
else 
{
	Console.WriteLine("Error: " + SCardHelper.StringifyError(rc));
}
            
RFIDReader.EndTransaction(SCardReaderDisposition.Leave);
RFIDReader.Disconnect(SCardReaderDisposition.Reset);
  </code>
                </example>
            </remarks>
        </member>
        <member name="M:PCSC.SCardReader.Transmit(System.IntPtr,System.Byte[],System.Int32,PCSC.SCardPCI,System.Byte[],System.Int32@)">
            <param name="pioSendPci">A pointer to a pre-defined Structure of Protocol Control Information. You can use one of the following:

<list type="table"><listheader><term>Protocol Control Information</term><description>Description</description></listheader><item><term><see cref="P:PCSC.SCardPCI.T0" /></term><description>Pre-defined T=0 PCI structure. (SCARD_PCI_T0)</description></item><item><term><see cref="P:PCSC.SCardPCI.T1" /></term><description>Pre-defined T=1 PCI structure. (SCARD_PCI_T1)</description></item><item><term><see cref="P:PCSC.SCardPCI.Raw" /></term><description>Pre-defined RAW PCI structure. (SCARD_PCI_RAW)</description></item></list></param>
            <param name="sendBuffer">APDU to send to the card. </param>
            <param name="sendBufLength">The buffer size of <paramref name="sendBuffer" /> in bytes.</param>
            <param name="ioRecvPci">Structure of protocol information. </param>
            <param name="recvBuffer">Response from the card.</param>
            <param name="recvBufLength">The buffer size of <paramref name="recvBuffer" /> in bytes.</param>
            <summary>Sends an APDU to the smart card that was previously connected by <see cref="M:PCSC.ISCardReader.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)" />. </summary>
            <returns>
                <list type="table">
                    <listheader>
                        <term>Return value</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.Success" />
                        </term>
                        <description> 	Successful (SCARD_S_SUCCESS)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InsufficientBuffer" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> are too big (SCARD_E_INSUFFICIENT_BUFFER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidHandle" />
                        </term>
                        <description>Invalid card handle (SCARD_E_INVALID_HANDLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidParameter" />
                        </term>
                        <description>
                            <paramref name="sendBuffer" /> or <paramref name="recvBuffer" /> or <paramref name="ioSendPci" /> is <see langword="null" /> (SCARD_E_INVALID_PARAMETER)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.InvalidValue" />
                        </term>
                        <description>Invalid Protocol, reader name, etc (SCARD_E_INVALID_VALUE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NoService" />
                        </term>
                        <description>The server is not runing (SCARD_E_NO_SERVICE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.NotTransacted" />
                        </term>
                        <description>APDU exchange not successful (SCARD_E_NOT_TRANSACTED)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ProtocolMismatch" />
                        </term>
                        <description>Connect protocol is different than desired (SCARD_E_PROTO_MISMATCH)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ReaderUnavailable" />
                        </term>
                        <description>The reader has been removed (SCARD_E_READER_UNAVAILABLE)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.CommunicationError" />
                        </term>
                        <description>An internal communications error has been detected (SCARD_F_COMM_ERROR)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.ResetCard" />
                        </term>
                        <description>The card has been reset by another application (SCARD_W_RESET_CARD)</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCardError.RemovedCard" />
                        </term>
                        <description>The card has been removed from the reader (SCARD_W_REMOVED_CARD)</description>
                    </item>
                </list>
            </returns>
            <remarks>
                <para>
The card responds from the APDU and stores this response in <paramref name="recvBuffer" />. The size of the returned data will be stored in <paramref name="recvBufferLength" />. This method will return with error code <see cref="E:PCSC.SCardError.InsufficientBuffer" /> if the buffer size of <paramref name="recvBuffer" /> is too small for the result. If one of the parameters <paramref name="sendBufferLength" /> or <paramref name="recvBufferLength" /> is invalid, the method will throw an <see cref="T:System.ArgumentOutOfRangeException" />.
</para>
                <para>
This method calls the API function SCardTransmit(). The pointers to the pre-defined / built-in PCI structures are determinated with dlsym() on UNIX/Linux hosts and GetProcAddress() on Windows hosts.
</para>
            </remarks>
        </member>
        <member name="T:PCSC.SCardReaderDisposition">
            <summary>Action to be taken on the reader.</summary>
            <remarks>The disposition action is not currently used in PC/SC Lite.</remarks>
        </member>
        <member name="F:PCSC.SCardReaderDisposition.Eject">
            <summary>Eject the card. (SCARD_EJECT_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardReaderDisposition.Leave">
            <summary>Do nothing. (SCARD_LEAVE_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardReaderDisposition.Reset">
            <summary>Reset the card. (SCARD_RESET_CARD)</summary>
        </member>
        <member name="F:PCSC.SCardReaderDisposition.Unpower">
            <summary>Unpower the card. (SCARD_UNPOWER_CARD)</summary>
        </member>
        <member name="T:PCSC.SCardReaderState">
            <summary>A structures that contains the old and the new Smart Card reader status.</summary>
            <remarks>
                <para>
Is used as parameter in <see cref="M:PCSC.SCardContext.GetStatusChange(System.IntPtr,PCSC.SCardReaderState[])" />.
</para>
                <para>
The new event state will be contained in <see cref="P:PCSC.SCardReaderState.EventState" />. A status change might be a card insertion or removal event, a change in ATR, etc.

To wait for a reader event (reader added or removed) you may use the special reader name "\\?PnP?\Notification". If a reader event occurs the state of this reader will change and the bit <see cref="F:PCSC.SCRState.Changed" /> will be set.
</para>
            </remarks>
        </member>
        <member name="C:PCSC.SCardReaderState">
            <summary>Creates a new Smart Card reader status object.</summary>
            <remarks />
        </member>
        <member name="P:PCSC.SCardReaderState.ATR">
            <summary>ATR Value.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:PCSC.SCardReaderState.CardChangeEventCnt">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.SCardReaderState.CurrentState">
            <summary>Current state of reader.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:PCSC.SCardReaderState.CurrentStateValue">
            <summary>Current state of reader.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:PCSC.SCardReaderState.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.SCardReaderState.EventState">
            <summary>Reader state after a state change.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:PCSC.SCardReaderState.EventStateValue">
            <summary>Reader state after a state change.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:PCSC.SCardReaderState.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.SCardReaderState.ReaderName">
            <summary>The reader name.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:PCSC.SCardReaderState.UserData">
            <summary>User defined data.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:PCSC.SCardReaderState.UserDataPointer">
            <summary>User defined data.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:PCSC.SCardScope">
            <summary>Scope of the establishment.</summary>
            <remarks>The following scopes are not used on Linux/UNIX machines using the PC/SC Lite daemon:
<list type="bullet"><item><term><see cref="F:PCSC.SCardScope.User" /></term></item><item><term><see cref="F:PCSC.SCardScope.Terminal" /></term></item><item><term><see cref="F:PCSC.SCardScope.Global" /></term></item></list></remarks>
        </member>
        <member name="F:PCSC.SCardScope.Global">
            <summary>Scope is global. </summary>
        </member>
        <member name="F:PCSC.SCardScope.System">
            <summary>Scope in system. Services on the local machine.</summary>
        </member>
        <member name="F:PCSC.SCardScope.Terminal">
            <summary>Scope in terminal. </summary>
        </member>
        <member name="F:PCSC.SCardScope.User">
            <summary>Scope in user space. </summary>
        </member>
        <member name="T:PCSC.SCardShareMode">
            <summary>Mode of connection type: exclusive or shared.</summary>
            <remarks>
                <see cref="F:PCSC.SCardShareMode.Direct" /> can be used before using <see cref="M:PCSC.ISCardReader.Control(System.IntPtr,System.Byte[],System.Byte[]@)" />  to send control commands to the reader even if a card is not present in the reader. Contrary to Windows winscard behavior, the reader is accessed in shared mode and not exclusive mode. </remarks>
        </member>
        <member name="F:PCSC.SCardShareMode.Direct">
            <summary>Direct control of the reader, even without a card. (SCARD_SHARE_DIRECT)</summary>
        </member>
        <member name="F:PCSC.SCardShareMode.Exclusive">
            <summary>This application will NOT allow others to share the reader. (SCARD_SHARE_EXCLUSIVE)</summary>
        </member>
        <member name="F:PCSC.SCardShareMode.Shared">
            <summary>This application will allow others to share the reader. (SCARD_SHARE_SHARED)</summary>
        </member>
        <member name="T:PCSC.SCardState">
            <summary>State of a reader.</summary>
            <remarks>Is a bit mask that represents the current reader status.</remarks>
        </member>
        <member name="F:PCSC.SCardState.Absent">
            <summary>There is no card in the reader.</summary>
        </member>
        <member name="F:PCSC.SCardState.Negotiable">
            <summary>The card has been reset and is awaiting PTS negotiation.</summary>
        </member>
        <member name="F:PCSC.SCardState.Powered">
            <summary>Power is being provided to the card, but the reader driver is unaware of the mode of the card.</summary>
        </member>
        <member name="F:PCSC.SCardState.Present">
            <summary>There is a card in the reader, but it has not been moved into position for use.</summary>
        </member>
        <member name="F:PCSC.SCardState.Specific">
            <summary>The card has been reset and specific communication protocols have been established. </summary>
        </member>
        <member name="F:PCSC.SCardState.Swallowed">
            <summary>There is a card in the reader in position for use. The card is not powered.</summary>
        </member>
        <member name="F:PCSC.SCardState.Unknown">
            <summary>Unknown status.</summary>
        </member>
        <member name="T:PCSC.SCRState">
            <summary>Reader state.</summary>
            <remarks />
        </member>
        <member name="F:PCSC.SCRState.ATRMatch">
            <summary>There is a card in the reader with an ATR matching one of the target cards. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set. This bit is only returned on the SCardLocateCards() function. (SCARD_STATE_ATRMATCH)</summary>
        </member>
        <member name="F:PCSC.SCRState.Changed">
            <summary>There is a difference between the state believed by the application, and the state known by the resource manager. When this bit is set, the application may assume a significant state change has occurred on this reader. (SCARD_STATE_CHANGED)</summary>
        </member>
        <member name="F:PCSC.SCRState.Empty">
            <summary>There is no card in the reader. If this bit is set, all the following bits will be clear. (SCARD_STATE_EMPTY)</summary>
        </member>
        <member name="F:PCSC.SCRState.Exclusive">
            <summary>The card in the reader is allocated for exclusive use by another application. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set. (SCARD_STATE_EXCLUSIVE)</summary>
        </member>
        <member name="F:PCSC.SCRState.Ignore">
            <summary>This reader should be ignored. (SCARD_STATE_IGNORE)</summary>
        </member>
        <member name="F:PCSC.SCRState.InUse">
            <summary>The card in the reader is in use by one or more other applications, but may be connected to in shared mode. If this bit is set, <see cref="F:PCSC.SCRState.Present" />  will also be set. (SCARD_STATE_INUSE)</summary>
        </member>
        <member name="F:PCSC.SCRState.Mute">
            <summary>There is an unresponsive card in the reader. (SCARD_STATE_MUTE)</summary>
        </member>
        <member name="F:PCSC.SCRState.Present">
            <summary>There is a card in the reader. (SCARD_STATE_PRESENT)</summary>
        </member>
        <member name="F:PCSC.SCRState.Unavailable">
            <summary>The actual state of this reader is not available. If this bit is set, then all the following bits are clear. (SCARD_STATE_UNAVAILABLE)</summary>
        </member>
        <member name="F:PCSC.SCRState.Unaware">
            <summary>The application is unaware of the current state, and would like to know. The use of this value results in an immediate return from state transition monitoring services. This is represented by all bits set to zero. (SCARD_STATE_UNAWARE)</summary>
        </member>
        <member name="F:PCSC.SCRState.Unknown">
            <summary>The given reader name is not recognized by the resource manager. If this bit is set, then <see cref="F:PCSC.SCRState.Changed" />  and <see cref="F:PCSC.SCRState.Ignore" /> will also be set. (SCARD_STATE_UNKNOWN)</summary>
        </member>
        <member name="F:PCSC.SCRState.Unpowered">
            <summary>The card is unpowered. (SCARD_STATE_UNPOWERED)</summary>
        </member>
        <member name="T:PCSC.SharingViolationException">
            <summary>A sharing violation occurred.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.SharingViolationException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.SharingViolationException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.SharingViolationException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.StatusChangeEvent">
            <param name="sender">The <see cref="T:PCSC.SCardMonitor" /> sender object.</param>
            <param name="e">Reader status information.</param>
            <summary>A general reader status change.</summary>
            <remarks>
                <example>
                    <code lang="C#">
// Create a monitor object with its own PC/SC context.
SCardMonitor monitor = new SCardMonitor(
	new SCardContext(),
	SCardScope.System);

// Point the callback function(s) to the pre-defined method MyStatusChangedMethod.
monitor.StatusChanged += new StatusChangeEvent(MyStatusChangedMethod);

// Start to monitor the reader
monitor.Start("OMNIKEY CardMan 5x21 00 01");
  </code>
                </example>
            </remarks>
        </member>
        <member name="T:PCSC.StatusChangeEventArgs">
            <summary>Information about a smart card reader status change.</summary>
            <remarks />
        </member>
        <member name="C:PCSC.StatusChangeEventArgs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.StatusChangeEventArgs(System.String,PCSC.SCRState,PCSC.SCRState,System.Byte[])">
            <param name="ReaderName">To be added.</param>
            <param name="LastState">To be added.</param>
            <param name="NewState">To be added.</param>
            <param name="Atr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.StatusChangeEventArgs.ATR">
            <summary>The card's ATR.</summary>
            <remarks />
        </member>
        <member name="F:PCSC.StatusChangeEventArgs.LastState">
            <summary>The reader's status before this event.</summary>
            <remarks>
                <para>
Is a bit mask containing one or more of the following values:
</para>
                <list type="table">
                    <listheader>
                        <term>State</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unaware" />
                        </term>
                        <description>The application is unaware of the current state, and would like to know. The use of this value results in an immediate return from state transition monitoring services. This is represented by all bits set to zero.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Ignore" />
                        </term>
                        <description>This reader should be ignored</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Changed" />
                        </term>
                        <description>There is a difference between the state believed by the application, and the state known by the resource manager. When this bit is set, the application may assume a significant state change has occurred on this reader.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unknown" />
                        </term>
                        <description>The given reader name is not recognized by the resource manager. If this bit is set, then <see cref="F:PCSC.SCRState.Changed" /> and <see cref="F:PCSC.SCRState.Ignore" /> will also be set</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unavailable" />
                        </term>
                        <description>The actual state of this reader is not available. If this bit is set, then all the following bits are clear.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Empty" />
                        </term>
                        <description>There is no card in the reader. If this bit is set, all the following bits will be clear</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Present" />
                        </term>
                        <description>There is a card in the reader</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Exclusive" />
                        </term>
                        <description>The card in the reader is allocated for exclusive use by another application. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.InUse" />
                        </term>
                        <description>The card in the reader is in use by one or more other applications, but may be connected to in shared mode. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Mute" />
                        </term>
                        <description>There is an unresponsive card in the reader.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="F:PCSC.StatusChangeEventArgs.NewState">
            <summary>The new status of this reader.</summary>
            <remarks>
                <para>
Is a bit mask containing one or more of the following values:
</para>
                <list type="table">
                    <listheader>
                        <term>State</term>
                        <description>Description</description>
                    </listheader>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unaware" />
                        </term>
                        <description>The application is unaware of the current state, and would like to know. The use of this value results in an immediate return from state transition monitoring services. This is represented by all bits set to zero.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Ignore" />
                        </term>
                        <description>This reader should be ignored</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Changed" />
                        </term>
                        <description>There is a difference between the state believed by the application, and the state known by the resource manager. When this bit is set, the application may assume a significant state change has occurred on this reader.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unknown" />
                        </term>
                        <description>The given reader name is not recognized by the resource manager. If this bit is set, then <see cref="F:PCSC.SCRState.Changed" /> and <see cref="F:PCSC.SCRState.Ignore" /> will also be set</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Unavailable" />
                        </term>
                        <description>The actual state of this reader is not available. If this bit is set, then all the following bits are clear.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Empty" />
                        </term>
                        <description>There is no card in the reader. If this bit is set, all the following bits will be clear</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Present" />
                        </term>
                        <description>There is a card in the reader</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Exclusive" />
                        </term>
                        <description>The card in the reader is allocated for exclusive use by another application. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.InUse" />
                        </term>
                        <description>The card in the reader is in use by one or more other applications, but may be connected to in shared mode. If this bit is set, <see cref="F:PCSC.SCRState.Present" /> will also be set.</description>
                    </item>
                    <item>
                        <term>
                            <see cref="F:PCSC.SCRState.Mute" />
                        </term>
                        <description>There is an unresponsive card in the reader.</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="F:PCSC.StatusChangeEventArgs.ReaderName">
            <summary>The reader name.</summary>
            <remarks>A human readable string of the reader name.</remarks>
        </member>
        <member name="T:PCSC.UnknownReaderException">
            <summary>The requested reader name is unknown.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnknownReaderException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnknownReaderException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnknownReaderException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.UnpoweredCardException">
            <summary>The smart card is unpowered.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnpoweredCardException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnpoweredCardException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnpoweredCardException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.UnresponsiveCardException">
            <summary>The smart card is unresponsive.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnresponsiveCardException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnresponsiveCardException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnresponsiveCardException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.UnsupportedFeatureException">
            <summary>The requested feature is unsupported.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnsupportedFeatureException(PCSC.SCardError)">
            <param name="serr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnsupportedFeatureException(PCSC.SCardError,System.String)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.UnsupportedFeatureException(PCSC.SCardError,System.String,System.Exception)">
            <param name="serr">To be added.</param>
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.Apdu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.Apdu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.Apdu.Case">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.Apdu.isocase">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.Apdu.IsValid">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.Apdu.op_Explicit(PCSC.Iso7816.Apdu)~System.Byte[]">
            <param name="apdu">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.Apdu.proto">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.Apdu.Protocol">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.Apdu.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.ClaHighPart">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Iso0x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Iso8x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Iso9x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.IsoAx">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.IsoBx">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.IsoCx">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.ProprietaryDx">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.ProprietaryEx">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.ProprietaryFx">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Rfu1x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Rfu2x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Rfu3x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Rfu4x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Rfu5x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Rfu6x">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ClaHighPart.Rfu7x">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.ClassByte">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ClassByte(System.Byte)">
            <param name="Cla">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ClassByte(PCSC.Iso7816.ClaHighPart,PCSC.Iso7816.SecureMessagingFormat,System.Int32)">
            <param name="highPart">To be added.</param>
            <param name="secMsgFmt">To be added.</param>
            <param name="logChannel">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ClassByte.HighPart">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ClassByte.LogicalChannel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ClassByte.op_Implicit(PCSC.Iso7816.ClassByte)~System.Byte">
            <param name="bInfo">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ClassByte.op_Implicit(System.Byte)~PCSC.Iso7816.ClassByte">
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ClassByte.Security">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ClassByte.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.CommandApdu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.CommandApdu(PCSC.Iso7816.IsoCase,PCSC.SCardProtocol)">
            <param name="isocase">To be added.</param>
            <param name="protocol">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.CommandApdu.cla">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.CLA">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.CommandApdu.Clone">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.CommandApdu.data">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.Data">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.ExpectedResponseLength">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.CommandApdu.GetClassByteInfo">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.CommandApdu.GetInstructionByteInfo">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.CommandApdu.GetLength">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.CommandApdu.ins">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.INS">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.Instruction">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.IsValid">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.CommandApdu.lc">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.Lc">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.CommandApdu.le">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.Le">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.CommandApdu.p1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.P1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.P1P2">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.CommandApdu.p2">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.P2">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.CommandApdu.P3">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.CommandApdu.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.ExtendedFileType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.ExtendedFileType.Dedicated">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ExtendedFileType.InternalElementary">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ExtendedFileType.Proprietary">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.ExtendedFileType.WorkingElementary">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.FileDescriptor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.FileDescriptor(System.Byte)">
            <param name="fileDescriptorByte">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileDescriptor.Descriptor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileDescriptor.ExtendedType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.FileDescriptor.IsSet(System.Byte,System.Byte)">
            <param name="mask">To be added.</param>
            <param name="bits">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.FileDescriptor.op_Implicit(PCSC.Iso7816.FileDescriptor)~System.Byte">
            <param name="fd">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.FileDescriptor.op_Implicit(System.Byte)~PCSC.Iso7816.FileDescriptor">
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileDescriptor.ShareMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileDescriptor.Structure">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileDescriptor.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.FileDescriptor.UpdateFileInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.FileShareMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.FileShareMode.NotShareable">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileShareMode.Shareable">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.FileStructureInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileStructureInfo.IsRecord">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileStructureInfo.IsTransparent">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileStructureInfo.RecordInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.FileStructureInfo.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.FileStructureInfo.UpdateFileInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.FileStructureType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.Cyclic">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.CyclicSimpleTlv">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.LinearFixed">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.LinearFixedSimpleTlv">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.LinearVariable">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.LinearVariableSimpleTlv">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.NoInformation">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileStructureType.Transparent">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.FileType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.FileType.Dedicated">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.FileType.Elementary">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.InstructionByte">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.InstructionByte(PCSC.Iso7816.InstructionCode)">
            <param name="code">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.InstructionByte(System.Byte)">
            <param name="ins">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.InstructionByte.Code">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.InstructionByte.ins">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.InstructionByte.op_Implicit(PCSC.Iso7816.InstructionByte)~System.Byte">
            <param name="insByteInfo">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.InstructionByte.op_Implicit(PCSC.Iso7816.InstructionCode)~PCSC.Iso7816.InstructionByte">
            <param name="code">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.InstructionByte.op_Implicit(System.Byte)~PCSC.Iso7816.InstructionByte">
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.InstructionByte.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.InstructionCode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.AppendRecord">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.Envelope">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.EraseBinary">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.ExternalAuthenticate">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.GetChallenge">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.GetData">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.GetResponse">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.InternalAuthenticate">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.ManageChannel">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.PutData">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.ReadBinary">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.ReadRecord">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.SelectFile">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.UpdateBinary">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.UpdateData">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.Verify">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.WriteBinary">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.InstructionCode.WriteRecord">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.IsoCard">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.IsoCard(PCSC.ISCardReader)">
            <param name="reader">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.IsoCard(PCSC.ISCardReader,System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)">
            <param name="reader">To be added.</param>
            <param name="readerName">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="proto">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.IsoCard.ActiveProtocol">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.IsoCard.Connect(System.String,PCSC.SCardShareMode,PCSC.SCardProtocol)">
            <param name="readerName">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="proto">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.IsoCard.ConstructCommandApdu(PCSC.Iso7816.IsoCase)">
            <param name="isoCase">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.IsoCard.CurrentShareMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.IsoCard.MaxReceiveSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.IsoCard.RetransmitWaitTime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.IsoCard.ThrowExceptionOnSCardError(PCSC.SCardError)">
            <param name="sc">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.IsoCard.Transmit(PCSC.Iso7816.CommandApdu)">
            <param name="cmdApdu">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.IsoCase">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.IsoCase.Case1">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.IsoCase.Case2Extended">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.IsoCase.Case2Short">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.IsoCase.Case3Extended">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.IsoCase.Case3Short">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.IsoCase.Case4Extended">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.IsoCase.Case4Short">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.RecordInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.RecordInfo.IsCyclic">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.RecordInfo.IsFixed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.RecordInfo.IsLinear">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.RecordInfo.IsSimpleTlv">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.RecordInfo.IsVariable">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.RecordInfo.UpdateFileInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.Response">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.Response.AddRecvPci(PCSC.SCardPCI)">
            <param name="recvPci">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.Response.AddResponseApdu(PCSC.Iso7816.ResponseApdu)">
            <param name="apdu">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.Response.GetData">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.Response.ResponseApduList">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.Response.StatusWord">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.Response.SW1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.Response.SW2">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.ResponseApdu">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ResponseApdu(System.Byte[],PCSC.Iso7816.IsoCase,PCSC.SCardProtocol)">
            <param name="response">To be added.</param>
            <param name="isoCase">To be added.</param>
            <param name="proto">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ResponseApdu(System.Byte[],PCSC.Iso7816.IsoCase,PCSC.SCardProtocol,System.Boolean)">
            <param name="response">To be added.</param>
            <param name="isoCase">To be added.</param>
            <param name="proto">To be added.</param>
            <param name="copy">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ResponseApdu(System.Byte[],System.Int32,PCSC.Iso7816.IsoCase,PCSC.SCardProtocol)">
            <param name="response">To be added.</param>
            <param name="length">To be added.</param>
            <param name="isoCase">To be added.</param>
            <param name="proto">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ResponseApdu(System.Byte[],System.Int32,PCSC.Iso7816.IsoCase,PCSC.SCardProtocol,System.Boolean)">
            <param name="response">To be added.</param>
            <param name="length">To be added.</param>
            <param name="isoCase">To be added.</param>
            <param name="proto">To be added.</param>
            <param name="copy">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApdu.Clone">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApdu.DataSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApdu.FullApdu">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApdu.GetData">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApdu.HasData">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApdu.IsValid">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.ResponseApdu.length">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.ResponseApdu.response">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApdu.StatusWord">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApdu.SW1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApdu.SW2">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApdu.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.ResponseApduList">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ResponseApduList(PCSC.Iso7816.ResponseApdu[])">
            <param name="lst">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.ResponseApduList(System.Collections.Generic.List{PCSC.Iso7816.ResponseApdu})">
            <param name="lst">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApduList.Current">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApduList.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApduList.MoveNext">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApduList.Reset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApduList.System#Collections#Generic#IEnumerable{PCSC#Iso7816#ResponseApdu}#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.ResponseApduList.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.ResponseApduList.System#Collections#IEnumerator#Current">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.SecureMessagingFormat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.SecureMessagingFormat.CmdHeaderAuthenticated">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SecureMessagingFormat.CmdHeaderNotAuthenticated">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SecureMessagingFormat.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SecureMessagingFormat.Proprietary">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.SimpleTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.SimpleTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.SimpleTlvPacket(System.Byte[])">
            <param name="tlvPacket">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.SimpleTlvPacket.ContentLength">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.SimpleTlvPacket.GetContent">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.SimpleTlvPacket.Tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.SimpleTlvPacket.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.SimpleTlvPacketBuilder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso7816.SimpleTlvPacketBuilder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.SimpleTlvPacketBuilder.Content">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.SimpleTlvPacketBuilder.ContentLength">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.SimpleTlvPacketBuilder.GetContent">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso7816.SimpleTlvPacketBuilder.Tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso7816.SimpleTlvPacketBuilder.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso7816.SW1Code">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorAuthorization">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorClassNotSupported">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorCmdNotAllowed">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorFile">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorFunctionNotSupported">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorInsNotSupported">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorLengthIncorrect">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorMemory">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorNoPreciseDiagnostic">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorNVDataChanged">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorNVDataNotChanged">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorP1P2Incorrect">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorP3Incorrect">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorParameterIncorrect">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorPurseBalance">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.ErrorSecurity">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.Normal">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.NormalDataResponse">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.NormalGetResponse">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.WarningNVDataChanged">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.SW1Code.WarningNVDataNotChanged">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso7816.TlvDataType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso7816.TlvDataType.Ber">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso7816.TlvDataType.Simple">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso8825.DataObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.DataObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.DataObject(System.Byte[],System.Int32,System.Int32)">
            <param name="data">To be added.</param>
            <param name="startIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.DataObject.Current">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso8825.DataObject.data">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObject.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.DataObject.EndsAt">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso8825.DataObject.length">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.DataObject.Length">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObject.MoveNext">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObject.Reset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso8825.DataObject.startIndex">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.DataObject.StartsAt">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.DataObject.System#Collections#IEnumerator#Current">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.DataObject.Tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObject.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.DataObjectFactory">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.DataObjectFactory">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObjectFactory.Add(System.Type)">
            <param name="t">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObjectFactory.Add``1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObjectFactory.CanCreate(System.Int64)">
            <param name="tagNumber">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObjectFactory.CreateInstance(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <param name="tagNumber">To be added.</param>
            <param name="packet">To be added.</param>
            <param name="startIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObjectFactory.CreateInstance``1(System.Byte[],System.Int32,System.Int32)">
            <typeparam name="T">To be added.</typeparam>
            <param name="packet">To be added.</param>
            <param name="startIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.DataObjectFactory.GetTypeByTag(System.Int64)">
            <param name="tagNumber">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.InvalidBerTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidBerTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidBerTlvPacket(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidBerTlvPacket(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.InvalidBerTlvPacketException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidBerTlvPacketException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidBerTlvPacketException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidBerTlvPacketException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.InvalidSimpleTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidSimpleTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidSimpleTlvPacket(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidSimpleTlvPacket(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.InvalidSimpleTlvPacketException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidSimpleTlvPacketException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidSimpleTlvPacketException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidSimpleTlvPacketException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.InvalidTlvData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidTlvData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidTlvData(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidTlvData(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.InvalidTlvDataException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidTlvDataException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidTlvDataException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.InvalidTlvDataException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.TlvData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.TlvData">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.TlvData.ContentLength">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.TlvData.GetContent">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.TlvData.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.Asn1.Asn1Boolean">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1Boolean">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1Boolean(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1Boolean(System.Byte[],System.Int32,System.Int32)">
            <param name="packet">To be added.</param>
            <param name="startIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1Boolean.GetAsn1Type">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1Boolean.op_Implicit(PCSC.Iso8825.Asn1.Asn1Boolean)~System.Boolean">
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1Boolean.op_Implicit(System.Boolean)~PCSC.Iso8825.Asn1.Asn1Boolean">
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.Asn1.Asn1Boolean.Tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.Asn1.Asn1Boolean.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.Asn1.Asn1IA5String">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1IA5String">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1IA5String(System.String)">
            <param name="content">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1IA5String(System.Byte[],System.Int32,System.Int32)">
            <param name="packet">To be added.</param>
            <param name="contentStartIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1IA5String(System.String,System.Int32,System.Int32)">
            <param name="content">To be added.</param>
            <param name="contentStartIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1IA5String.ConvertToAscii(System.String,System.Int32,System.Int32)">
            <param name="text">To be added.</param>
            <param name="startIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1IA5String.GetAsn1Type">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1IA5String.op_Addition(PCSC.Iso8825.Asn1.Asn1IA5String,PCSC.Iso8825.Asn1.Asn1IA5String)">
            <param name="a">To be added.</param>
            <param name="b">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1IA5String.op_Implicit(PCSC.Iso8825.Asn1.Asn1IA5String)~System.String">
            <param name="text">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1IA5String.op_Implicit(System.String)~PCSC.Iso8825.Asn1.Asn1IA5String">
            <param name="text">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.Asn1.Asn1IA5String.Tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1IA5String.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.Asn1.Asn1Integer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1Integer">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.Asn1Integer(System.Byte[],System.Int32,System.Int32)">
            <param name="packet">To be added.</param>
            <param name="startIndex">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1Integer.GetAsn1Type">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.Asn1.Asn1Integer.IsPositive">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.Asn1.Asn1Integer.Tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.Asn1Integer.ToLong">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.Asn1.Asn1Type">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.BitString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.BmpString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Boolean">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.CharacterString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.EmbeddedPdv">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.EndOfContent">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Enumerated">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.External">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.GeneralizedTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.GeneralString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.GraphicString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.IA5String">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Integer">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Null">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.NumericString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.ObjectDescriptor">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.ObjectIdentifier">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.OctetString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.PrintableString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Real">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.RelativeOid">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Sequence">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Set">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.T61String">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.UniversalString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.UtcTime">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.Utf8String">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.VideotexString">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.Asn1.Asn1Type.VisibleString">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso8825.Asn1.IAsn1Type">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.Asn1.IAsn1Type.GetAsn1Type">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.Asn1.InvalidAsn1BooleanException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.InvalidAsn1BooleanException">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.InvalidAsn1BooleanException(System.String)">
            <param name="message">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.Asn1.InvalidAsn1BooleanException(System.String,System.Exception)">
            <param name="message">To be added.</param>
            <param name="innerException">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:PCSC.Iso8825.BasicEncodingRules.BerClassType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerClassType.Application">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerClassType.ContextSpecific">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerClassType.Private">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerClassType.Universal">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso8825.BasicEncodingRules.BerLengthEncoding">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerLengthEncoding.DefiniteForm">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerLengthEncoding.IndefiniteForm">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso8825.BasicEncodingRules.BerStructureType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerStructureType.Constructed">
            <summary>To be added.</summary>
        </member>
        <member name="F:PCSC.Iso8825.BasicEncodingRules.BerStructureType.Primitive">
            <summary>To be added.</summary>
        </member>
        <member name="T:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket(System.Byte[])">
            <param name="packet">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket(System.Byte[],System.Int32)">
            <param name="packet">To be added.</param>
            <param name="packetStart">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.Class">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.ContentLength">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.ContentStartsAt">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.GetContent">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.GetDataObject">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.GetEncapsulatedPackets">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.HasHighTagNumber">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.LengthEncoding">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.PacketEndsAt">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.PacketSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.PacketStartsAt">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.StructureType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.Tag">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.TagOverflow">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:PCSC.Iso8825.BasicEncodingRules.BerTlvPacket.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
    </members>
</doc>
